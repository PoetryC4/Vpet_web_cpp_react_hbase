/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef THBaseService_H
#define THBaseService_H

#include <thrift/TDispatchProcessor.h>
#include "hbase_types.h"

namespace apache { namespace hadoop { namespace hbase { namespace thrift2 {

class THBaseServiceIf {
 public:
  virtual ~THBaseServiceIf() {}

  /**
   * Test for the existence of columns in the table, as specified in the TGet.
   * 
   * @return true if the specified TGet matches one or more keys, false if not
   * 
   * @param table the table to check on
   * 
   * @param tget the TGet to check for
   */
  virtual bool exists(const std::string& table, const TGet& tget) = 0;

  /**
   * Test for the existence of columns in the table, as specified by the TGets.
   * 
   * This will return an array of booleans. Each value will be true if the related Get matches
   * one or more keys, false if not.
   * 
   * @param table the table to check on
   * 
   * @param tgets a list of TGets to check for
   */
  virtual void existsAll(std::vector<bool> & _return, const std::string& table, const std::vector<TGet> & tgets) = 0;

  /**
   * Method for getting data from a row.
   * 
   * If the row cannot be found an empty Result is returned.
   * This can be checked by the empty field of the TResult
   * 
   * @return the result
   * 
   * @param table the table to get from
   * 
   * @param tget the TGet to fetch
   */
  virtual void get(TResult& _return, const std::string& table, const TGet& tget) = 0;

  /**
   * Method for getting multiple rows.
   * 
   * If a row cannot be found there will be a null
   * value in the result list for that TGet at the
   * same position.
   * 
   * So the Results are in the same order as the TGets.
   * 
   * @param table the table to get from
   * 
   * @param tgets a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  virtual void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & tgets) = 0;

  /**
   * Commit a TPut to a table.
   * 
   * @param table the table to put data in
   * 
   * @param tput the TPut to put
   */
  virtual void put(const std::string& table, const TPut& tput) = 0;

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the TPut.
   * 
   * @return true if the new put was executed, false otherwise
   * 
   * @param table to check in and put to
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tput the TPut to put if the check succeeds
   */
  virtual bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput) = 0;

  /**
   * Commit a List of Puts to the table.
   * 
   * @param table the table to put data in
   * 
   * @param tputs a list of TPuts to commit
   */
  virtual void putMultiple(const std::string& table, const std::vector<TPut> & tputs) = 0;

  /**
   * Deletes as specified by the TDelete.
   * 
   * Note: "delete" is a reserved keyword and cannot be used in Thrift
   * thus the inconsistent naming scheme from the other functions.
   * 
   * @param table the table to delete from
   * 
   * @param tdelete the TDelete to delete
   */
  virtual void deleteSingle(const std::string& table, const TDelete& tdelete) = 0;

  /**
   * Bulk commit a List of TDeletes to the table.
   * 
   * Throws a TIOError if any of the deletes fail.
   * 
   * Always returns an empty list for backwards compatibility.
   * 
   * @param table the table to delete from
   * 
   * @param tdeletes list of TDeletes to delete
   */
  virtual void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & tdeletes) = 0;

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the delete.
   * 
   * @return true if the new delete was executed, false otherwise
   * 
   * @param table to check in and delete from
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tdelete the TDelete to execute if the check succeeds
   */
  virtual bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete) = 0;
  virtual void increment(TResult& _return, const std::string& table, const TIncrement& tincrement) = 0;
  virtual void append(TResult& _return, const std::string& table, const TAppend& tappend) = 0;

  /**
   * Get a Scanner for the provided TScan object.
   * 
   * @return Scanner Id to be used with other scanner procedures
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   */
  virtual int32_t openScanner(const std::string& table, const TScan& tscan) = 0;

  /**
   * Grabs multiple rows from a Scanner.
   * 
   * @return Between zero and numRows TResults
   * 
   * @param scannerId the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   * 
   * @param numRows number of rows to return
   */
  virtual void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) = 0;

  /**
   * Closes the scanner. Should be called to free server side resources timely.
   * Typically close once the scanner is not needed anymore, i.e. after looping
   * over it to get all the required rows.
   * 
   * @param scannerId the Id of the Scanner to close *
   */
  virtual void closeScanner(const int32_t scannerId) = 0;

  /**
   * mutateRow performs multiple mutations atomically on a single row.
   * 
   * @param table table to apply the mutations
   * 
   * @param trowMutations mutations to apply
   */
  virtual void mutateRow(const std::string& table, const TRowMutations& trowMutations) = 0;

  /**
   * Get results for the provided TScan object.
   * This helper function opens a scanner, get the results and close the scanner.
   * 
   * @return between zero and numRows TResults
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   * 
   * @param numRows number of rows to return
   */
  virtual void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& tscan, const int32_t numRows) = 0;

  /**
   * Given a table and a row get the location of the region that
   * would contain the given row key.
   * 
   * reload = true means the cache will be cleared and the location
   * will be fetched from meta.
   * 
   * @param table
   * @param row
   * @param reload
   */
  virtual void getRegionLocation(THRegionLocation& _return, const std::string& table, const std::string& row, const bool reload) = 0;

  /**
   * Get all of the region locations for a given table.
   * 
   * 
   * @param table
   */
  virtual void getAllRegionLocations(std::vector<THRegionLocation> & _return, const std::string& table) = 0;

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it mutates the row.
   * 
   * @return true if the row was mutated, false otherwise
   * 
   * @param table to check in and delete from
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param compareOp comparison to make on the value
   * 
   * @param value the expected value to be compared against, if not provided the
   * check is for the non-existence of the column in question
   * 
   * @param rowMutations row mutations to execute if the value matches
   */
  virtual bool checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const TCompareOp::type compareOp, const std::string& value, const TRowMutations& rowMutations) = 0;

  /**
   * Get a table descriptor.
   * @return the TableDescriptor of the giving tablename
   * 
   * 
   * @param table the tablename of the table to get tableDescriptor
   */
  virtual void getTableDescriptor(TTableDescriptor& _return, const TTableName& table) = 0;

  /**
   * Get table descriptors of tables.
   * @return the TableDescriptor of the giving tablename
   * 
   * 
   * @param tables the tablename list of the tables to get tableDescriptor
   */
  virtual void getTableDescriptors(std::vector<TTableDescriptor> & _return, const std::vector<TTableName> & tables) = 0;

  /**
   * 
   * @return true if table exists already, false if not
   * 
   * 
   * @param tableName the tablename of the tables to check
   */
  virtual bool tableExists(const TTableName& tableName) = 0;

  /**
   * Get table descriptors of tables that match the given pattern
   * @return the tableDescriptors of the matching table
   * 
   * 
   * @param regex The regular expression to match against
   * 
   * @param includeSysTables set to false if match only against userspace tables
   */
  virtual void getTableDescriptorsByPattern(std::vector<TTableDescriptor> & _return, const std::string& regex, const bool includeSysTables) = 0;

  /**
   * Get table descriptors of tables in the given namespace
   * @return the tableDescriptors in the namespce
   * 
   * 
   * @param name The namesapce's name
   */
  virtual void getTableDescriptorsByNamespace(std::vector<TTableDescriptor> & _return, const std::string& name) = 0;

  /**
   * Get table names of tables that match the given pattern
   * @return the table names of the matching table
   * 
   * 
   * @param regex The regular expression to match against
   * 
   * @param includeSysTables set to false if match only against userspace tables
   */
  virtual void getTableNamesByPattern(std::vector<TTableName> & _return, const std::string& regex, const bool includeSysTables) = 0;

  /**
   * Get table names of tables in the given namespace
   * @return the table names of the matching table
   * 
   * 
   * @param name The namesapce's name
   */
  virtual void getTableNamesByNamespace(std::vector<TTableName> & _return, const std::string& name) = 0;

  /**
   * Creates a new table with an initial set of empty regions defined by the specified split keys.
   * The total number of regions created will be the number of split keys plus one. Synchronous
   * operation.
   * 
   * 
   * @param desc table descriptor for table
   * 
   * @param splitKeys rray of split keys for the initial regions of the table
   */
  virtual void createTable(const TTableDescriptor& desc, const std::vector<std::string> & splitKeys) = 0;

  /**
   * Deletes a table. Synchronous operation.
   * 
   * 
   * @param tableName the tablename to delete
   */
  virtual void deleteTable(const TTableName& tableName) = 0;

  /**
   * Truncate a table. Synchronous operation.
   * 
   * 
   * @param tableName the tablename to truncate
   * 
   * @param preserveSplits whether to  preserve previous splits
   */
  virtual void truncateTable(const TTableName& tableName, const bool preserveSplits) = 0;

  /**
   * Enalbe a table
   * 
   * 
   * @param tableName the tablename to enable
   */
  virtual void enableTable(const TTableName& tableName) = 0;

  /**
   * Disable a table
   * 
   * 
   * @param tableName the tablename to disable
   */
  virtual void disableTable(const TTableName& tableName) = 0;

  /**
   * 
   * @return true if table is enabled, false if not
   * 
   * 
   * @param tableName the tablename to check
   */
  virtual bool isTableEnabled(const TTableName& tableName) = 0;

  /**
   * 
   * @return true if table is disabled, false if not
   * 
   * 
   * @param tableName the tablename to check
   */
  virtual bool isTableDisabled(const TTableName& tableName) = 0;

  /**
   * 
   * @return true if table is available, false if not
   * 
   * 
   * @param tableName the tablename to check
   */
  virtual bool isTableAvailable(const TTableName& tableName) = 0;

  /**
   *  * Use this api to check if the table has been created with the specified number of splitkeys
   *  * which was used while creating the given table. Note : If this api is used after a table's
   *  * region gets splitted, the api may return false.
   *  *
   *  * @return true if table is available, false if not
   *  *
   *  * @deprecated Since 2.2.0. Because the same method in Table interface has been deprecated
   *  * since 2.0.0, we will remove it in 3.0.0 release.
   *  * Use {@link #isTableAvailable(TTableName tableName)} instead
   * *
   * 
   * @param tableName the tablename to check
   * 
   * @param splitKeys keys to check if the table has been created with all split keys
   */
  virtual bool isTableAvailableWithSplit(const TTableName& tableName, const std::vector<std::string> & splitKeys) = 0;

  /**
   * Add a column family to an existing table. Synchronous operation.
   * 
   * 
   * @param tableName the tablename to add column family to
   * 
   * @param column column family descriptor of column family to be added
   */
  virtual void addColumnFamily(const TTableName& tableName, const TColumnFamilyDescriptor& column) = 0;

  /**
   * Delete a column family from a table. Synchronous operation.
   * 
   * 
   * @param tableName the tablename to delete column family from
   * 
   * @param column name of column family to be deleted
   */
  virtual void deleteColumnFamily(const TTableName& tableName, const std::string& column) = 0;

  /**
   * Modify an existing column family on a table. Synchronous operation.
   * 
   * 
   * @param tableName the tablename to modify column family
   * 
   * @param column column family descriptor of column family to be modified
   */
  virtual void modifyColumnFamily(const TTableName& tableName, const TColumnFamilyDescriptor& column) = 0;

  /**
   * Modify an existing table
   * 
   * 
   * @param desc the descriptor of the table to modify
   */
  virtual void modifyTable(const TTableDescriptor& desc) = 0;

  /**
   * Create a new namespace. Blocks until namespace has been successfully created or an exception is
   * thrown
   * 
   * 
   * @param namespaceDesc descriptor which describes the new namespace
   */
  virtual void createNamespace(const TNamespaceDescriptor& namespaceDesc) = 0;

  /**
   * Modify an existing namespace.  Blocks until namespace has been successfully modified or an
   * exception is thrown
   * 
   * 
   * @param namespaceDesc descriptor which describes the new namespace
   */
  virtual void modifyNamespace(const TNamespaceDescriptor& namespaceDesc) = 0;

  /**
   * Delete an existing namespace. Only empty namespaces (no tables) can be removed.
   * Blocks until namespace has been successfully deleted or an
   * exception is thrown.
   * 
   * 
   * @param name namespace name
   */
  virtual void deleteNamespace(const std::string& name) = 0;

  /**
   * Get a namespace descriptor by name.
   * @retrun the descriptor
   * 
   * 
   * @param name name of namespace descriptor
   */
  virtual void getNamespaceDescriptor(TNamespaceDescriptor& _return, const std::string& name) = 0;

  /**
   * @return all namespaces
   * 
   */
  virtual void listNamespaceDescriptors(std::vector<TNamespaceDescriptor> & _return) = 0;

  /**
   * @return all namespace names
   * 
   */
  virtual void listNamespaces(std::vector<std::string> & _return) = 0;

  /**
   * Get the type of this thrift server.
   * 
   * @return the type of this thrift server
   */
  virtual TThriftServerType::type getThriftServerType() = 0;

  /**
   * Retrieves online slow RPC logs from the provided list of
   * RegionServers
   * 
   * @return online slowlog response list
   * @throws TIOError if a remote or network exception occurs
   * 
   * @param serverNames @param serverNames Server names to get slowlog responses from
   * 
   * @param logQueryFilter @param logQueryFilter filter to be used if provided
   */
  virtual void getSlowLogResponses(std::vector<TOnlineLogRecord> & _return, const std::set<TServerName> & serverNames, const TLogQueryFilter& logQueryFilter) = 0;

  /**
   * Clears online slow/large RPC logs from the provided list of
   * RegionServers
   * 
   * @return List of booleans representing if online slowlog response buffer is cleaned
   *   from each RegionServer
   * @throws TIOError if a remote or network exception occurs
   * 
   * @param serverNames @param serverNames Set of Server names to clean slowlog responses from
   */
  virtual void clearSlowLogResponses(std::vector<bool> & _return, const std::set<TServerName> & serverNames) = 0;

  /**
   * Returns the cluster ID for this cluster.
   */
  virtual void getClusterId(std::string& _return) = 0;
};

class THBaseServiceIfFactory {
 public:
  typedef THBaseServiceIf Handler;

  virtual ~THBaseServiceIfFactory() {}

  virtual THBaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(THBaseServiceIf* /* handler */) = 0;
};

class THBaseServiceIfSingletonFactory : virtual public THBaseServiceIfFactory {
 public:
  THBaseServiceIfSingletonFactory(const boost::shared_ptr<THBaseServiceIf>& iface) : iface_(iface) {}
  virtual ~THBaseServiceIfSingletonFactory() {}

  virtual THBaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(THBaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<THBaseServiceIf> iface_;
};

class THBaseServiceNull : virtual public THBaseServiceIf {
 public:
  virtual ~THBaseServiceNull() {}
  bool exists(const std::string& /* table */, const TGet& /* tget */) {
    bool _return = false;
    return _return;
  }
  void existsAll(std::vector<bool> & /* _return */, const std::string& /* table */, const std::vector<TGet> & /* tgets */) {
    return;
  }
  void get(TResult& /* _return */, const std::string& /* table */, const TGet& /* tget */) {
    return;
  }
  void getMultiple(std::vector<TResult> & /* _return */, const std::string& /* table */, const std::vector<TGet> & /* tgets */) {
    return;
  }
  void put(const std::string& /* table */, const TPut& /* tput */) {
    return;
  }
  bool checkAndPut(const std::string& /* table */, const std::string& /* row */, const std::string& /* family */, const std::string& /* qualifier */, const std::string& /* value */, const TPut& /* tput */) {
    bool _return = false;
    return _return;
  }
  void putMultiple(const std::string& /* table */, const std::vector<TPut> & /* tputs */) {
    return;
  }
  void deleteSingle(const std::string& /* table */, const TDelete& /* tdelete */) {
    return;
  }
  void deleteMultiple(std::vector<TDelete> & /* _return */, const std::string& /* table */, const std::vector<TDelete> & /* tdeletes */) {
    return;
  }
  bool checkAndDelete(const std::string& /* table */, const std::string& /* row */, const std::string& /* family */, const std::string& /* qualifier */, const std::string& /* value */, const TDelete& /* tdelete */) {
    bool _return = false;
    return _return;
  }
  void increment(TResult& /* _return */, const std::string& /* table */, const TIncrement& /* tincrement */) {
    return;
  }
  void append(TResult& /* _return */, const std::string& /* table */, const TAppend& /* tappend */) {
    return;
  }
  int32_t openScanner(const std::string& /* table */, const TScan& /* tscan */) {
    int32_t _return = 0;
    return _return;
  }
  void getScannerRows(std::vector<TResult> & /* _return */, const int32_t /* scannerId */, const int32_t /* numRows */) {
    return;
  }
  void closeScanner(const int32_t /* scannerId */) {
    return;
  }
  void mutateRow(const std::string& /* table */, const TRowMutations& /* trowMutations */) {
    return;
  }
  void getScannerResults(std::vector<TResult> & /* _return */, const std::string& /* table */, const TScan& /* tscan */, const int32_t /* numRows */) {
    return;
  }
  void getRegionLocation(THRegionLocation& /* _return */, const std::string& /* table */, const std::string& /* row */, const bool /* reload */) {
    return;
  }
  void getAllRegionLocations(std::vector<THRegionLocation> & /* _return */, const std::string& /* table */) {
    return;
  }
  bool checkAndMutate(const std::string& /* table */, const std::string& /* row */, const std::string& /* family */, const std::string& /* qualifier */, const TCompareOp::type /* compareOp */, const std::string& /* value */, const TRowMutations& /* rowMutations */) {
    bool _return = false;
    return _return;
  }
  void getTableDescriptor(TTableDescriptor& /* _return */, const TTableName& /* table */) {
    return;
  }
  void getTableDescriptors(std::vector<TTableDescriptor> & /* _return */, const std::vector<TTableName> & /* tables */) {
    return;
  }
  bool tableExists(const TTableName& /* tableName */) {
    bool _return = false;
    return _return;
  }
  void getTableDescriptorsByPattern(std::vector<TTableDescriptor> & /* _return */, const std::string& /* regex */, const bool /* includeSysTables */) {
    return;
  }
  void getTableDescriptorsByNamespace(std::vector<TTableDescriptor> & /* _return */, const std::string& /* name */) {
    return;
  }
  void getTableNamesByPattern(std::vector<TTableName> & /* _return */, const std::string& /* regex */, const bool /* includeSysTables */) {
    return;
  }
  void getTableNamesByNamespace(std::vector<TTableName> & /* _return */, const std::string& /* name */) {
    return;
  }
  void createTable(const TTableDescriptor& /* desc */, const std::vector<std::string> & /* splitKeys */) {
    return;
  }
  void deleteTable(const TTableName& /* tableName */) {
    return;
  }
  void truncateTable(const TTableName& /* tableName */, const bool /* preserveSplits */) {
    return;
  }
  void enableTable(const TTableName& /* tableName */) {
    return;
  }
  void disableTable(const TTableName& /* tableName */) {
    return;
  }
  bool isTableEnabled(const TTableName& /* tableName */) {
    bool _return = false;
    return _return;
  }
  bool isTableDisabled(const TTableName& /* tableName */) {
    bool _return = false;
    return _return;
  }
  bool isTableAvailable(const TTableName& /* tableName */) {
    bool _return = false;
    return _return;
  }
  bool isTableAvailableWithSplit(const TTableName& /* tableName */, const std::vector<std::string> & /* splitKeys */) {
    bool _return = false;
    return _return;
  }
  void addColumnFamily(const TTableName& /* tableName */, const TColumnFamilyDescriptor& /* column */) {
    return;
  }
  void deleteColumnFamily(const TTableName& /* tableName */, const std::string& /* column */) {
    return;
  }
  void modifyColumnFamily(const TTableName& /* tableName */, const TColumnFamilyDescriptor& /* column */) {
    return;
  }
  void modifyTable(const TTableDescriptor& /* desc */) {
    return;
  }
  void createNamespace(const TNamespaceDescriptor& /* namespaceDesc */) {
    return;
  }
  void modifyNamespace(const TNamespaceDescriptor& /* namespaceDesc */) {
    return;
  }
  void deleteNamespace(const std::string& /* name */) {
    return;
  }
  void getNamespaceDescriptor(TNamespaceDescriptor& /* _return */, const std::string& /* name */) {
    return;
  }
  void listNamespaceDescriptors(std::vector<TNamespaceDescriptor> & /* _return */) {
    return;
  }
  void listNamespaces(std::vector<std::string> & /* _return */) {
    return;
  }
  TThriftServerType::type getThriftServerType() {
    TThriftServerType::type _return = (TThriftServerType::type)0;
    return _return;
  }
  void getSlowLogResponses(std::vector<TOnlineLogRecord> & /* _return */, const std::set<TServerName> & /* serverNames */, const TLogQueryFilter& /* logQueryFilter */) {
    return;
  }
  void clearSlowLogResponses(std::vector<bool> & /* _return */, const std::set<TServerName> & /* serverNames */) {
    return;
  }
  void getClusterId(std::string& /* _return */) {
    return;
  }
};


class THBaseService_exists_args {
 public:

  static const char* ascii_fingerprint; // = "5D03253A87067873287480A7ADB13829";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0x03,0x25,0x3A,0x87,0x06,0x78,0x73,0x28,0x74,0x80,0xA7,0xAD,0xB1,0x38,0x29};

  THBaseService_exists_args(const THBaseService_exists_args&);
  THBaseService_exists_args& operator=(const THBaseService_exists_args&);
  THBaseService_exists_args() : table() {
  }

  virtual ~THBaseService_exists_args() throw();
  std::string table;
  TGet tget;

  void __set_table(const std::string& val);

  void __set_tget(const TGet& val);

  bool operator == (const THBaseService_exists_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tget == rhs.tget))
      return false;
    return true;
  }
  bool operator != (const THBaseService_exists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_exists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_exists_args& obj);
};


class THBaseService_exists_pargs {
 public:

  static const char* ascii_fingerprint; // = "5D03253A87067873287480A7ADB13829";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0x03,0x25,0x3A,0x87,0x06,0x78,0x73,0x28,0x74,0x80,0xA7,0xAD,0xB1,0x38,0x29};


  virtual ~THBaseService_exists_pargs() throw();
  const std::string* table;
  const TGet* tget;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_exists_pargs& obj);
};

typedef struct _THBaseService_exists_result__isset {
  _THBaseService_exists_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_exists_result__isset;

class THBaseService_exists_result {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};

  THBaseService_exists_result(const THBaseService_exists_result&);
  THBaseService_exists_result& operator=(const THBaseService_exists_result&);
  THBaseService_exists_result() : success(0) {
  }

  virtual ~THBaseService_exists_result() throw();
  bool success;
  TIOError io;

  _THBaseService_exists_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_exists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_exists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_exists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_exists_result& obj);
};

typedef struct _THBaseService_exists_presult__isset {
  _THBaseService_exists_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_exists_presult__isset;

class THBaseService_exists_presult {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};


  virtual ~THBaseService_exists_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_exists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_exists_presult& obj);
};


class THBaseService_existsAll_args {
 public:

  static const char* ascii_fingerprint; // = "12AFD0D2067ED03559BD2BA9D819112C";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0xAF,0xD0,0xD2,0x06,0x7E,0xD0,0x35,0x59,0xBD,0x2B,0xA9,0xD8,0x19,0x11,0x2C};

  THBaseService_existsAll_args(const THBaseService_existsAll_args&);
  THBaseService_existsAll_args& operator=(const THBaseService_existsAll_args&);
  THBaseService_existsAll_args() : table() {
  }

  virtual ~THBaseService_existsAll_args() throw();
  std::string table;
  std::vector<TGet>  tgets;

  void __set_table(const std::string& val);

  void __set_tgets(const std::vector<TGet> & val);

  bool operator == (const THBaseService_existsAll_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tgets == rhs.tgets))
      return false;
    return true;
  }
  bool operator != (const THBaseService_existsAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_existsAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_existsAll_args& obj);
};


class THBaseService_existsAll_pargs {
 public:

  static const char* ascii_fingerprint; // = "12AFD0D2067ED03559BD2BA9D819112C";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0xAF,0xD0,0xD2,0x06,0x7E,0xD0,0x35,0x59,0xBD,0x2B,0xA9,0xD8,0x19,0x11,0x2C};


  virtual ~THBaseService_existsAll_pargs() throw();
  const std::string* table;
  const std::vector<TGet> * tgets;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_existsAll_pargs& obj);
};

typedef struct _THBaseService_existsAll_result__isset {
  _THBaseService_existsAll_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_existsAll_result__isset;

class THBaseService_existsAll_result {
 public:

  static const char* ascii_fingerprint; // = "006576CE101E1259697781088D23D6DE";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x65,0x76,0xCE,0x10,0x1E,0x12,0x59,0x69,0x77,0x81,0x08,0x8D,0x23,0xD6,0xDE};

  THBaseService_existsAll_result(const THBaseService_existsAll_result&);
  THBaseService_existsAll_result& operator=(const THBaseService_existsAll_result&);
  THBaseService_existsAll_result() {
  }

  virtual ~THBaseService_existsAll_result() throw();
  std::vector<bool>  success;
  TIOError io;

  _THBaseService_existsAll_result__isset __isset;

  void __set_success(const std::vector<bool> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_existsAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_existsAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_existsAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_existsAll_result& obj);
};

typedef struct _THBaseService_existsAll_presult__isset {
  _THBaseService_existsAll_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_existsAll_presult__isset;

class THBaseService_existsAll_presult {
 public:

  static const char* ascii_fingerprint; // = "006576CE101E1259697781088D23D6DE";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x65,0x76,0xCE,0x10,0x1E,0x12,0x59,0x69,0x77,0x81,0x08,0x8D,0x23,0xD6,0xDE};


  virtual ~THBaseService_existsAll_presult() throw();
  std::vector<bool> * success;
  TIOError io;

  _THBaseService_existsAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_existsAll_presult& obj);
};


class THBaseService_get_args {
 public:

  static const char* ascii_fingerprint; // = "5D03253A87067873287480A7ADB13829";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0x03,0x25,0x3A,0x87,0x06,0x78,0x73,0x28,0x74,0x80,0xA7,0xAD,0xB1,0x38,0x29};

  THBaseService_get_args(const THBaseService_get_args&);
  THBaseService_get_args& operator=(const THBaseService_get_args&);
  THBaseService_get_args() : table() {
  }

  virtual ~THBaseService_get_args() throw();
  std::string table;
  TGet tget;

  void __set_table(const std::string& val);

  void __set_tget(const TGet& val);

  bool operator == (const THBaseService_get_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tget == rhs.tget))
      return false;
    return true;
  }
  bool operator != (const THBaseService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_get_args& obj);
};


class THBaseService_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "5D03253A87067873287480A7ADB13829";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0x03,0x25,0x3A,0x87,0x06,0x78,0x73,0x28,0x74,0x80,0xA7,0xAD,0xB1,0x38,0x29};


  virtual ~THBaseService_get_pargs() throw();
  const std::string* table;
  const TGet* tget;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_get_pargs& obj);
};

typedef struct _THBaseService_get_result__isset {
  _THBaseService_get_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_get_result__isset;

class THBaseService_get_result {
 public:

  static const char* ascii_fingerprint; // = "28DDE1EF243520FB485278F784899881";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xDD,0xE1,0xEF,0x24,0x35,0x20,0xFB,0x48,0x52,0x78,0xF7,0x84,0x89,0x98,0x81};

  THBaseService_get_result(const THBaseService_get_result&);
  THBaseService_get_result& operator=(const THBaseService_get_result&);
  THBaseService_get_result() {
  }

  virtual ~THBaseService_get_result() throw();
  TResult success;
  TIOError io;

  _THBaseService_get_result__isset __isset;

  void __set_success(const TResult& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_get_result& obj);
};

typedef struct _THBaseService_get_presult__isset {
  _THBaseService_get_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_get_presult__isset;

class THBaseService_get_presult {
 public:

  static const char* ascii_fingerprint; // = "28DDE1EF243520FB485278F784899881";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xDD,0xE1,0xEF,0x24,0x35,0x20,0xFB,0x48,0x52,0x78,0xF7,0x84,0x89,0x98,0x81};


  virtual ~THBaseService_get_presult() throw();
  TResult* success;
  TIOError io;

  _THBaseService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_get_presult& obj);
};


class THBaseService_getMultiple_args {
 public:

  static const char* ascii_fingerprint; // = "12AFD0D2067ED03559BD2BA9D819112C";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0xAF,0xD0,0xD2,0x06,0x7E,0xD0,0x35,0x59,0xBD,0x2B,0xA9,0xD8,0x19,0x11,0x2C};

  THBaseService_getMultiple_args(const THBaseService_getMultiple_args&);
  THBaseService_getMultiple_args& operator=(const THBaseService_getMultiple_args&);
  THBaseService_getMultiple_args() : table() {
  }

  virtual ~THBaseService_getMultiple_args() throw();
  std::string table;
  std::vector<TGet>  tgets;

  void __set_table(const std::string& val);

  void __set_tgets(const std::vector<TGet> & val);

  bool operator == (const THBaseService_getMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tgets == rhs.tgets))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getMultiple_args& obj);
};


class THBaseService_getMultiple_pargs {
 public:

  static const char* ascii_fingerprint; // = "12AFD0D2067ED03559BD2BA9D819112C";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0xAF,0xD0,0xD2,0x06,0x7E,0xD0,0x35,0x59,0xBD,0x2B,0xA9,0xD8,0x19,0x11,0x2C};


  virtual ~THBaseService_getMultiple_pargs() throw();
  const std::string* table;
  const std::vector<TGet> * tgets;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getMultiple_pargs& obj);
};

typedef struct _THBaseService_getMultiple_result__isset {
  _THBaseService_getMultiple_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getMultiple_result__isset;

class THBaseService_getMultiple_result {
 public:

  static const char* ascii_fingerprint; // = "FC4FC405A0A6CD7CB2BB3AFC411EA556";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x4F,0xC4,0x05,0xA0,0xA6,0xCD,0x7C,0xB2,0xBB,0x3A,0xFC,0x41,0x1E,0xA5,0x56};

  THBaseService_getMultiple_result(const THBaseService_getMultiple_result&);
  THBaseService_getMultiple_result& operator=(const THBaseService_getMultiple_result&);
  THBaseService_getMultiple_result() {
  }

  virtual ~THBaseService_getMultiple_result() throw();
  std::vector<TResult>  success;
  TIOError io;

  _THBaseService_getMultiple_result__isset __isset;

  void __set_success(const std::vector<TResult> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getMultiple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getMultiple_result& obj);
};

typedef struct _THBaseService_getMultiple_presult__isset {
  _THBaseService_getMultiple_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getMultiple_presult__isset;

class THBaseService_getMultiple_presult {
 public:

  static const char* ascii_fingerprint; // = "FC4FC405A0A6CD7CB2BB3AFC411EA556";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x4F,0xC4,0x05,0xA0,0xA6,0xCD,0x7C,0xB2,0xBB,0x3A,0xFC,0x41,0x1E,0xA5,0x56};


  virtual ~THBaseService_getMultiple_presult() throw();
  std::vector<TResult> * success;
  TIOError io;

  _THBaseService_getMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getMultiple_presult& obj);
};


class THBaseService_put_args {
 public:

  static const char* ascii_fingerprint; // = "0C26BA9BF089D321B908071210C9ACD4";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x26,0xBA,0x9B,0xF0,0x89,0xD3,0x21,0xB9,0x08,0x07,0x12,0x10,0xC9,0xAC,0xD4};

  THBaseService_put_args(const THBaseService_put_args&);
  THBaseService_put_args& operator=(const THBaseService_put_args&);
  THBaseService_put_args() : table() {
  }

  virtual ~THBaseService_put_args() throw();
  std::string table;
  TPut tput;

  void __set_table(const std::string& val);

  void __set_tput(const TPut& val);

  bool operator == (const THBaseService_put_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tput == rhs.tput))
      return false;
    return true;
  }
  bool operator != (const THBaseService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_put_args& obj);
};


class THBaseService_put_pargs {
 public:

  static const char* ascii_fingerprint; // = "0C26BA9BF089D321B908071210C9ACD4";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x26,0xBA,0x9B,0xF0,0x89,0xD3,0x21,0xB9,0x08,0x07,0x12,0x10,0xC9,0xAC,0xD4};


  virtual ~THBaseService_put_pargs() throw();
  const std::string* table;
  const TPut* tput;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_put_pargs& obj);
};

typedef struct _THBaseService_put_result__isset {
  _THBaseService_put_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_put_result__isset;

class THBaseService_put_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_put_result(const THBaseService_put_result&);
  THBaseService_put_result& operator=(const THBaseService_put_result&);
  THBaseService_put_result() {
  }

  virtual ~THBaseService_put_result() throw();
  TIOError io;

  _THBaseService_put_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_put_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_put_result& obj);
};

typedef struct _THBaseService_put_presult__isset {
  _THBaseService_put_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_put_presult__isset;

class THBaseService_put_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_put_presult() throw();
  TIOError io;

  _THBaseService_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_put_presult& obj);
};

typedef struct _THBaseService_checkAndPut_args__isset {
  _THBaseService_checkAndPut_args__isset() : value(false) {}
  bool value :1;
} _THBaseService_checkAndPut_args__isset;

class THBaseService_checkAndPut_args {
 public:

  static const char* ascii_fingerprint; // = "62AAB649BE97C10B9632F7082E1C3AEA";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0xAA,0xB6,0x49,0xBE,0x97,0xC1,0x0B,0x96,0x32,0xF7,0x08,0x2E,0x1C,0x3A,0xEA};

  THBaseService_checkAndPut_args(const THBaseService_checkAndPut_args&);
  THBaseService_checkAndPut_args& operator=(const THBaseService_checkAndPut_args&);
  THBaseService_checkAndPut_args() : table(), row(), family(), qualifier(), value() {
  }

  virtual ~THBaseService_checkAndPut_args() throw();
  std::string table;
  std::string row;
  std::string family;
  std::string qualifier;
  std::string value;
  TPut tput;

  _THBaseService_checkAndPut_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_row(const std::string& val);

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_value(const std::string& val);

  void __set_tput(const TPut& val);

  bool operator == (const THBaseService_checkAndPut_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(tput == rhs.tput))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndPut_args& obj);
};


class THBaseService_checkAndPut_pargs {
 public:

  static const char* ascii_fingerprint; // = "62AAB649BE97C10B9632F7082E1C3AEA";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0xAA,0xB6,0x49,0xBE,0x97,0xC1,0x0B,0x96,0x32,0xF7,0x08,0x2E,0x1C,0x3A,0xEA};


  virtual ~THBaseService_checkAndPut_pargs() throw();
  const std::string* table;
  const std::string* row;
  const std::string* family;
  const std::string* qualifier;
  const std::string* value;
  const TPut* tput;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndPut_pargs& obj);
};

typedef struct _THBaseService_checkAndPut_result__isset {
  _THBaseService_checkAndPut_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndPut_result__isset;

class THBaseService_checkAndPut_result {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};

  THBaseService_checkAndPut_result(const THBaseService_checkAndPut_result&);
  THBaseService_checkAndPut_result& operator=(const THBaseService_checkAndPut_result&);
  THBaseService_checkAndPut_result() : success(0) {
  }

  virtual ~THBaseService_checkAndPut_result() throw();
  bool success;
  TIOError io;

  _THBaseService_checkAndPut_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_checkAndPut_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndPut_result& obj);
};

typedef struct _THBaseService_checkAndPut_presult__isset {
  _THBaseService_checkAndPut_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndPut_presult__isset;

class THBaseService_checkAndPut_presult {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};


  virtual ~THBaseService_checkAndPut_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_checkAndPut_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndPut_presult& obj);
};


class THBaseService_putMultiple_args {
 public:

  static const char* ascii_fingerprint; // = "C3F9A1A7E9FD4B5B94CBBC0385E68FC0";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xF9,0xA1,0xA7,0xE9,0xFD,0x4B,0x5B,0x94,0xCB,0xBC,0x03,0x85,0xE6,0x8F,0xC0};

  THBaseService_putMultiple_args(const THBaseService_putMultiple_args&);
  THBaseService_putMultiple_args& operator=(const THBaseService_putMultiple_args&);
  THBaseService_putMultiple_args() : table() {
  }

  virtual ~THBaseService_putMultiple_args() throw();
  std::string table;
  std::vector<TPut>  tputs;

  void __set_table(const std::string& val);

  void __set_tputs(const std::vector<TPut> & val);

  bool operator == (const THBaseService_putMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tputs == rhs.tputs))
      return false;
    return true;
  }
  bool operator != (const THBaseService_putMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_putMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_putMultiple_args& obj);
};


class THBaseService_putMultiple_pargs {
 public:

  static const char* ascii_fingerprint; // = "C3F9A1A7E9FD4B5B94CBBC0385E68FC0";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xF9,0xA1,0xA7,0xE9,0xFD,0x4B,0x5B,0x94,0xCB,0xBC,0x03,0x85,0xE6,0x8F,0xC0};


  virtual ~THBaseService_putMultiple_pargs() throw();
  const std::string* table;
  const std::vector<TPut> * tputs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_putMultiple_pargs& obj);
};

typedef struct _THBaseService_putMultiple_result__isset {
  _THBaseService_putMultiple_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_putMultiple_result__isset;

class THBaseService_putMultiple_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_putMultiple_result(const THBaseService_putMultiple_result&);
  THBaseService_putMultiple_result& operator=(const THBaseService_putMultiple_result&);
  THBaseService_putMultiple_result() {
  }

  virtual ~THBaseService_putMultiple_result() throw();
  TIOError io;

  _THBaseService_putMultiple_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_putMultiple_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_putMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_putMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_putMultiple_result& obj);
};

typedef struct _THBaseService_putMultiple_presult__isset {
  _THBaseService_putMultiple_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_putMultiple_presult__isset;

class THBaseService_putMultiple_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_putMultiple_presult() throw();
  TIOError io;

  _THBaseService_putMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_putMultiple_presult& obj);
};


class THBaseService_deleteSingle_args {
 public:

  static const char* ascii_fingerprint; // = "7A22FEBAFF1EBC025CB2F47CEDEE8161";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x22,0xFE,0xBA,0xFF,0x1E,0xBC,0x02,0x5C,0xB2,0xF4,0x7C,0xED,0xEE,0x81,0x61};

  THBaseService_deleteSingle_args(const THBaseService_deleteSingle_args&);
  THBaseService_deleteSingle_args& operator=(const THBaseService_deleteSingle_args&);
  THBaseService_deleteSingle_args() : table() {
  }

  virtual ~THBaseService_deleteSingle_args() throw();
  std::string table;
  TDelete tdelete;

  void __set_table(const std::string& val);

  void __set_tdelete(const TDelete& val);

  bool operator == (const THBaseService_deleteSingle_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tdelete == rhs.tdelete))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteSingle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteSingle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteSingle_args& obj);
};


class THBaseService_deleteSingle_pargs {
 public:

  static const char* ascii_fingerprint; // = "7A22FEBAFF1EBC025CB2F47CEDEE8161";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x22,0xFE,0xBA,0xFF,0x1E,0xBC,0x02,0x5C,0xB2,0xF4,0x7C,0xED,0xEE,0x81,0x61};


  virtual ~THBaseService_deleteSingle_pargs() throw();
  const std::string* table;
  const TDelete* tdelete;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteSingle_pargs& obj);
};

typedef struct _THBaseService_deleteSingle_result__isset {
  _THBaseService_deleteSingle_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteSingle_result__isset;

class THBaseService_deleteSingle_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_deleteSingle_result(const THBaseService_deleteSingle_result&);
  THBaseService_deleteSingle_result& operator=(const THBaseService_deleteSingle_result&);
  THBaseService_deleteSingle_result() {
  }

  virtual ~THBaseService_deleteSingle_result() throw();
  TIOError io;

  _THBaseService_deleteSingle_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_deleteSingle_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteSingle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteSingle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteSingle_result& obj);
};

typedef struct _THBaseService_deleteSingle_presult__isset {
  _THBaseService_deleteSingle_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteSingle_presult__isset;

class THBaseService_deleteSingle_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_deleteSingle_presult() throw();
  TIOError io;

  _THBaseService_deleteSingle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteSingle_presult& obj);
};


class THBaseService_deleteMultiple_args {
 public:

  static const char* ascii_fingerprint; // = "2605FCB4A214271FD0F4872DB688E7A6";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x05,0xFC,0xB4,0xA2,0x14,0x27,0x1F,0xD0,0xF4,0x87,0x2D,0xB6,0x88,0xE7,0xA6};

  THBaseService_deleteMultiple_args(const THBaseService_deleteMultiple_args&);
  THBaseService_deleteMultiple_args& operator=(const THBaseService_deleteMultiple_args&);
  THBaseService_deleteMultiple_args() : table() {
  }

  virtual ~THBaseService_deleteMultiple_args() throw();
  std::string table;
  std::vector<TDelete>  tdeletes;

  void __set_table(const std::string& val);

  void __set_tdeletes(const std::vector<TDelete> & val);

  bool operator == (const THBaseService_deleteMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tdeletes == rhs.tdeletes))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteMultiple_args& obj);
};


class THBaseService_deleteMultiple_pargs {
 public:

  static const char* ascii_fingerprint; // = "2605FCB4A214271FD0F4872DB688E7A6";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x05,0xFC,0xB4,0xA2,0x14,0x27,0x1F,0xD0,0xF4,0x87,0x2D,0xB6,0x88,0xE7,0xA6};


  virtual ~THBaseService_deleteMultiple_pargs() throw();
  const std::string* table;
  const std::vector<TDelete> * tdeletes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteMultiple_pargs& obj);
};

typedef struct _THBaseService_deleteMultiple_result__isset {
  _THBaseService_deleteMultiple_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_deleteMultiple_result__isset;

class THBaseService_deleteMultiple_result {
 public:

  static const char* ascii_fingerprint; // = "67A7967452879D8F24F088A3CD8925B0";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0xA7,0x96,0x74,0x52,0x87,0x9D,0x8F,0x24,0xF0,0x88,0xA3,0xCD,0x89,0x25,0xB0};

  THBaseService_deleteMultiple_result(const THBaseService_deleteMultiple_result&);
  THBaseService_deleteMultiple_result& operator=(const THBaseService_deleteMultiple_result&);
  THBaseService_deleteMultiple_result() {
  }

  virtual ~THBaseService_deleteMultiple_result() throw();
  std::vector<TDelete>  success;
  TIOError io;

  _THBaseService_deleteMultiple_result__isset __isset;

  void __set_success(const std::vector<TDelete> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_deleteMultiple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteMultiple_result& obj);
};

typedef struct _THBaseService_deleteMultiple_presult__isset {
  _THBaseService_deleteMultiple_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_deleteMultiple_presult__isset;

class THBaseService_deleteMultiple_presult {
 public:

  static const char* ascii_fingerprint; // = "67A7967452879D8F24F088A3CD8925B0";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0xA7,0x96,0x74,0x52,0x87,0x9D,0x8F,0x24,0xF0,0x88,0xA3,0xCD,0x89,0x25,0xB0};


  virtual ~THBaseService_deleteMultiple_presult() throw();
  std::vector<TDelete> * success;
  TIOError io;

  _THBaseService_deleteMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteMultiple_presult& obj);
};

typedef struct _THBaseService_checkAndDelete_args__isset {
  _THBaseService_checkAndDelete_args__isset() : value(false) {}
  bool value :1;
} _THBaseService_checkAndDelete_args__isset;

class THBaseService_checkAndDelete_args {
 public:

  static const char* ascii_fingerprint; // = "FC98427C4688BA1FD9312DFFFF0D0B38";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x98,0x42,0x7C,0x46,0x88,0xBA,0x1F,0xD9,0x31,0x2D,0xFF,0xFF,0x0D,0x0B,0x38};

  THBaseService_checkAndDelete_args(const THBaseService_checkAndDelete_args&);
  THBaseService_checkAndDelete_args& operator=(const THBaseService_checkAndDelete_args&);
  THBaseService_checkAndDelete_args() : table(), row(), family(), qualifier(), value() {
  }

  virtual ~THBaseService_checkAndDelete_args() throw();
  std::string table;
  std::string row;
  std::string family;
  std::string qualifier;
  std::string value;
  TDelete tdelete;

  _THBaseService_checkAndDelete_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_row(const std::string& val);

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_value(const std::string& val);

  void __set_tdelete(const TDelete& val);

  bool operator == (const THBaseService_checkAndDelete_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(tdelete == rhs.tdelete))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndDelete_args& obj);
};


class THBaseService_checkAndDelete_pargs {
 public:

  static const char* ascii_fingerprint; // = "FC98427C4688BA1FD9312DFFFF0D0B38";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x98,0x42,0x7C,0x46,0x88,0xBA,0x1F,0xD9,0x31,0x2D,0xFF,0xFF,0x0D,0x0B,0x38};


  virtual ~THBaseService_checkAndDelete_pargs() throw();
  const std::string* table;
  const std::string* row;
  const std::string* family;
  const std::string* qualifier;
  const std::string* value;
  const TDelete* tdelete;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndDelete_pargs& obj);
};

typedef struct _THBaseService_checkAndDelete_result__isset {
  _THBaseService_checkAndDelete_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndDelete_result__isset;

class THBaseService_checkAndDelete_result {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};

  THBaseService_checkAndDelete_result(const THBaseService_checkAndDelete_result&);
  THBaseService_checkAndDelete_result& operator=(const THBaseService_checkAndDelete_result&);
  THBaseService_checkAndDelete_result() : success(0) {
  }

  virtual ~THBaseService_checkAndDelete_result() throw();
  bool success;
  TIOError io;

  _THBaseService_checkAndDelete_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_checkAndDelete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndDelete_result& obj);
};

typedef struct _THBaseService_checkAndDelete_presult__isset {
  _THBaseService_checkAndDelete_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndDelete_presult__isset;

class THBaseService_checkAndDelete_presult {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};


  virtual ~THBaseService_checkAndDelete_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_checkAndDelete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndDelete_presult& obj);
};


class THBaseService_increment_args {
 public:

  static const char* ascii_fingerprint; // = "BEC1020832F9AE294B27DEF2F7B45000";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xC1,0x02,0x08,0x32,0xF9,0xAE,0x29,0x4B,0x27,0xDE,0xF2,0xF7,0xB4,0x50,0x00};

  THBaseService_increment_args(const THBaseService_increment_args&);
  THBaseService_increment_args& operator=(const THBaseService_increment_args&);
  THBaseService_increment_args() : table() {
  }

  virtual ~THBaseService_increment_args() throw();
  std::string table;
  TIncrement tincrement;

  void __set_table(const std::string& val);

  void __set_tincrement(const TIncrement& val);

  bool operator == (const THBaseService_increment_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tincrement == rhs.tincrement))
      return false;
    return true;
  }
  bool operator != (const THBaseService_increment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_increment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_increment_args& obj);
};


class THBaseService_increment_pargs {
 public:

  static const char* ascii_fingerprint; // = "BEC1020832F9AE294B27DEF2F7B45000";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xC1,0x02,0x08,0x32,0xF9,0xAE,0x29,0x4B,0x27,0xDE,0xF2,0xF7,0xB4,0x50,0x00};


  virtual ~THBaseService_increment_pargs() throw();
  const std::string* table;
  const TIncrement* tincrement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_increment_pargs& obj);
};

typedef struct _THBaseService_increment_result__isset {
  _THBaseService_increment_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_increment_result__isset;

class THBaseService_increment_result {
 public:

  static const char* ascii_fingerprint; // = "28DDE1EF243520FB485278F784899881";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xDD,0xE1,0xEF,0x24,0x35,0x20,0xFB,0x48,0x52,0x78,0xF7,0x84,0x89,0x98,0x81};

  THBaseService_increment_result(const THBaseService_increment_result&);
  THBaseService_increment_result& operator=(const THBaseService_increment_result&);
  THBaseService_increment_result() {
  }

  virtual ~THBaseService_increment_result() throw();
  TResult success;
  TIOError io;

  _THBaseService_increment_result__isset __isset;

  void __set_success(const TResult& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_increment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_increment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_increment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_increment_result& obj);
};

typedef struct _THBaseService_increment_presult__isset {
  _THBaseService_increment_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_increment_presult__isset;

class THBaseService_increment_presult {
 public:

  static const char* ascii_fingerprint; // = "28DDE1EF243520FB485278F784899881";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xDD,0xE1,0xEF,0x24,0x35,0x20,0xFB,0x48,0x52,0x78,0xF7,0x84,0x89,0x98,0x81};


  virtual ~THBaseService_increment_presult() throw();
  TResult* success;
  TIOError io;

  _THBaseService_increment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_increment_presult& obj);
};


class THBaseService_append_args {
 public:

  static const char* ascii_fingerprint; // = "D73D446D6B0919BE956215AB44AE8F38";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0x3D,0x44,0x6D,0x6B,0x09,0x19,0xBE,0x95,0x62,0x15,0xAB,0x44,0xAE,0x8F,0x38};

  THBaseService_append_args(const THBaseService_append_args&);
  THBaseService_append_args& operator=(const THBaseService_append_args&);
  THBaseService_append_args() : table() {
  }

  virtual ~THBaseService_append_args() throw();
  std::string table;
  TAppend tappend;

  void __set_table(const std::string& val);

  void __set_tappend(const TAppend& val);

  bool operator == (const THBaseService_append_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tappend == rhs.tappend))
      return false;
    return true;
  }
  bool operator != (const THBaseService_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_append_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_append_args& obj);
};


class THBaseService_append_pargs {
 public:

  static const char* ascii_fingerprint; // = "D73D446D6B0919BE956215AB44AE8F38";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0x3D,0x44,0x6D,0x6B,0x09,0x19,0xBE,0x95,0x62,0x15,0xAB,0x44,0xAE,0x8F,0x38};


  virtual ~THBaseService_append_pargs() throw();
  const std::string* table;
  const TAppend* tappend;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_append_pargs& obj);
};

typedef struct _THBaseService_append_result__isset {
  _THBaseService_append_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_append_result__isset;

class THBaseService_append_result {
 public:

  static const char* ascii_fingerprint; // = "28DDE1EF243520FB485278F784899881";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xDD,0xE1,0xEF,0x24,0x35,0x20,0xFB,0x48,0x52,0x78,0xF7,0x84,0x89,0x98,0x81};

  THBaseService_append_result(const THBaseService_append_result&);
  THBaseService_append_result& operator=(const THBaseService_append_result&);
  THBaseService_append_result() {
  }

  virtual ~THBaseService_append_result() throw();
  TResult success;
  TIOError io;

  _THBaseService_append_result__isset __isset;

  void __set_success(const TResult& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_append_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_append_result& obj);
};

typedef struct _THBaseService_append_presult__isset {
  _THBaseService_append_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_append_presult__isset;

class THBaseService_append_presult {
 public:

  static const char* ascii_fingerprint; // = "28DDE1EF243520FB485278F784899881";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xDD,0xE1,0xEF,0x24,0x35,0x20,0xFB,0x48,0x52,0x78,0xF7,0x84,0x89,0x98,0x81};


  virtual ~THBaseService_append_presult() throw();
  TResult* success;
  TIOError io;

  _THBaseService_append_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_append_presult& obj);
};


class THBaseService_openScanner_args {
 public:

  static const char* ascii_fingerprint; // = "03A0D855D4791A62362BEE7515FDF232";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xA0,0xD8,0x55,0xD4,0x79,0x1A,0x62,0x36,0x2B,0xEE,0x75,0x15,0xFD,0xF2,0x32};

  THBaseService_openScanner_args(const THBaseService_openScanner_args&);
  THBaseService_openScanner_args& operator=(const THBaseService_openScanner_args&);
  THBaseService_openScanner_args() : table() {
  }

  virtual ~THBaseService_openScanner_args() throw();
  std::string table;
  TScan tscan;

  void __set_table(const std::string& val);

  void __set_tscan(const TScan& val);

  bool operator == (const THBaseService_openScanner_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tscan == rhs.tscan))
      return false;
    return true;
  }
  bool operator != (const THBaseService_openScanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_openScanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_openScanner_args& obj);
};


class THBaseService_openScanner_pargs {
 public:

  static const char* ascii_fingerprint; // = "03A0D855D4791A62362BEE7515FDF232";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xA0,0xD8,0x55,0xD4,0x79,0x1A,0x62,0x36,0x2B,0xEE,0x75,0x15,0xFD,0xF2,0x32};


  virtual ~THBaseService_openScanner_pargs() throw();
  const std::string* table;
  const TScan* tscan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_openScanner_pargs& obj);
};

typedef struct _THBaseService_openScanner_result__isset {
  _THBaseService_openScanner_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_openScanner_result__isset;

class THBaseService_openScanner_result {
 public:

  static const char* ascii_fingerprint; // = "763151BD7D5E8CBD4AF2BC2551BB95BF";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x31,0x51,0xBD,0x7D,0x5E,0x8C,0xBD,0x4A,0xF2,0xBC,0x25,0x51,0xBB,0x95,0xBF};

  THBaseService_openScanner_result(const THBaseService_openScanner_result&);
  THBaseService_openScanner_result& operator=(const THBaseService_openScanner_result&);
  THBaseService_openScanner_result() : success(0) {
  }

  virtual ~THBaseService_openScanner_result() throw();
  int32_t success;
  TIOError io;

  _THBaseService_openScanner_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_openScanner_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_openScanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_openScanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_openScanner_result& obj);
};

typedef struct _THBaseService_openScanner_presult__isset {
  _THBaseService_openScanner_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_openScanner_presult__isset;

class THBaseService_openScanner_presult {
 public:

  static const char* ascii_fingerprint; // = "763151BD7D5E8CBD4AF2BC2551BB95BF";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x31,0x51,0xBD,0x7D,0x5E,0x8C,0xBD,0x4A,0xF2,0xBC,0x25,0x51,0xBB,0x95,0xBF};


  virtual ~THBaseService_openScanner_presult() throw();
  int32_t* success;
  TIOError io;

  _THBaseService_openScanner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_openScanner_presult& obj);
};

typedef struct _THBaseService_getScannerRows_args__isset {
  _THBaseService_getScannerRows_args__isset() : numRows(true) {}
  bool numRows :1;
} _THBaseService_getScannerRows_args__isset;

class THBaseService_getScannerRows_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  THBaseService_getScannerRows_args(const THBaseService_getScannerRows_args&);
  THBaseService_getScannerRows_args& operator=(const THBaseService_getScannerRows_args&);
  THBaseService_getScannerRows_args() : scannerId(0), numRows(1) {
  }

  virtual ~THBaseService_getScannerRows_args() throw();
  int32_t scannerId;
  int32_t numRows;

  _THBaseService_getScannerRows_args__isset __isset;

  void __set_scannerId(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const THBaseService_getScannerRows_args & rhs) const
  {
    if (!(scannerId == rhs.scannerId))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerRows_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerRows_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getScannerRows_args& obj);
};


class THBaseService_getScannerRows_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~THBaseService_getScannerRows_pargs() throw();
  const int32_t* scannerId;
  const int32_t* numRows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getScannerRows_pargs& obj);
};

typedef struct _THBaseService_getScannerRows_result__isset {
  _THBaseService_getScannerRows_result__isset() : success(false), io(false), ia(false) {}
  bool success :1;
  bool io :1;
  bool ia :1;
} _THBaseService_getScannerRows_result__isset;

class THBaseService_getScannerRows_result {
 public:

  static const char* ascii_fingerprint; // = "8C2B70D64CC66290E17C4FE9FBDC973B";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x2B,0x70,0xD6,0x4C,0xC6,0x62,0x90,0xE1,0x7C,0x4F,0xE9,0xFB,0xDC,0x97,0x3B};

  THBaseService_getScannerRows_result(const THBaseService_getScannerRows_result&);
  THBaseService_getScannerRows_result& operator=(const THBaseService_getScannerRows_result&);
  THBaseService_getScannerRows_result() {
  }

  virtual ~THBaseService_getScannerRows_result() throw();
  std::vector<TResult>  success;
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_getScannerRows_result__isset __isset;

  void __set_success(const std::vector<TResult> & val);

  void __set_io(const TIOError& val);

  void __set_ia(const TIllegalArgument& val);

  bool operator == (const THBaseService_getScannerRows_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerRows_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerRows_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getScannerRows_result& obj);
};

typedef struct _THBaseService_getScannerRows_presult__isset {
  _THBaseService_getScannerRows_presult__isset() : success(false), io(false), ia(false) {}
  bool success :1;
  bool io :1;
  bool ia :1;
} _THBaseService_getScannerRows_presult__isset;

class THBaseService_getScannerRows_presult {
 public:

  static const char* ascii_fingerprint; // = "8C2B70D64CC66290E17C4FE9FBDC973B";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x2B,0x70,0xD6,0x4C,0xC6,0x62,0x90,0xE1,0x7C,0x4F,0xE9,0xFB,0xDC,0x97,0x3B};


  virtual ~THBaseService_getScannerRows_presult() throw();
  std::vector<TResult> * success;
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_getScannerRows_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getScannerRows_presult& obj);
};


class THBaseService_closeScanner_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  THBaseService_closeScanner_args(const THBaseService_closeScanner_args&);
  THBaseService_closeScanner_args& operator=(const THBaseService_closeScanner_args&);
  THBaseService_closeScanner_args() : scannerId(0) {
  }

  virtual ~THBaseService_closeScanner_args() throw();
  int32_t scannerId;

  void __set_scannerId(const int32_t val);

  bool operator == (const THBaseService_closeScanner_args & rhs) const
  {
    if (!(scannerId == rhs.scannerId))
      return false;
    return true;
  }
  bool operator != (const THBaseService_closeScanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_closeScanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_closeScanner_args& obj);
};


class THBaseService_closeScanner_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~THBaseService_closeScanner_pargs() throw();
  const int32_t* scannerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_closeScanner_pargs& obj);
};

typedef struct _THBaseService_closeScanner_result__isset {
  _THBaseService_closeScanner_result__isset() : io(false), ia(false) {}
  bool io :1;
  bool ia :1;
} _THBaseService_closeScanner_result__isset;

class THBaseService_closeScanner_result {
 public:

  static const char* ascii_fingerprint; // = "4086AB1961B2BE0B1FD5E79C9D873BBD";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x86,0xAB,0x19,0x61,0xB2,0xBE,0x0B,0x1F,0xD5,0xE7,0x9C,0x9D,0x87,0x3B,0xBD};

  THBaseService_closeScanner_result(const THBaseService_closeScanner_result&);
  THBaseService_closeScanner_result& operator=(const THBaseService_closeScanner_result&);
  THBaseService_closeScanner_result() {
  }

  virtual ~THBaseService_closeScanner_result() throw();
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_closeScanner_result__isset __isset;

  void __set_io(const TIOError& val);

  void __set_ia(const TIllegalArgument& val);

  bool operator == (const THBaseService_closeScanner_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const THBaseService_closeScanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_closeScanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_closeScanner_result& obj);
};

typedef struct _THBaseService_closeScanner_presult__isset {
  _THBaseService_closeScanner_presult__isset() : io(false), ia(false) {}
  bool io :1;
  bool ia :1;
} _THBaseService_closeScanner_presult__isset;

class THBaseService_closeScanner_presult {
 public:

  static const char* ascii_fingerprint; // = "4086AB1961B2BE0B1FD5E79C9D873BBD";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x86,0xAB,0x19,0x61,0xB2,0xBE,0x0B,0x1F,0xD5,0xE7,0x9C,0x9D,0x87,0x3B,0xBD};


  virtual ~THBaseService_closeScanner_presult() throw();
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_closeScanner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_closeScanner_presult& obj);
};


class THBaseService_mutateRow_args {
 public:

  static const char* ascii_fingerprint; // = "4C01DB6B66C4416169CF9D8466851EF0";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x01,0xDB,0x6B,0x66,0xC4,0x41,0x61,0x69,0xCF,0x9D,0x84,0x66,0x85,0x1E,0xF0};

  THBaseService_mutateRow_args(const THBaseService_mutateRow_args&);
  THBaseService_mutateRow_args& operator=(const THBaseService_mutateRow_args&);
  THBaseService_mutateRow_args() : table() {
  }

  virtual ~THBaseService_mutateRow_args() throw();
  std::string table;
  TRowMutations trowMutations;

  void __set_table(const std::string& val);

  void __set_trowMutations(const TRowMutations& val);

  bool operator == (const THBaseService_mutateRow_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(trowMutations == rhs.trowMutations))
      return false;
    return true;
  }
  bool operator != (const THBaseService_mutateRow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_mutateRow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_mutateRow_args& obj);
};


class THBaseService_mutateRow_pargs {
 public:

  static const char* ascii_fingerprint; // = "4C01DB6B66C4416169CF9D8466851EF0";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x01,0xDB,0x6B,0x66,0xC4,0x41,0x61,0x69,0xCF,0x9D,0x84,0x66,0x85,0x1E,0xF0};


  virtual ~THBaseService_mutateRow_pargs() throw();
  const std::string* table;
  const TRowMutations* trowMutations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_mutateRow_pargs& obj);
};

typedef struct _THBaseService_mutateRow_result__isset {
  _THBaseService_mutateRow_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_mutateRow_result__isset;

class THBaseService_mutateRow_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_mutateRow_result(const THBaseService_mutateRow_result&);
  THBaseService_mutateRow_result& operator=(const THBaseService_mutateRow_result&);
  THBaseService_mutateRow_result() {
  }

  virtual ~THBaseService_mutateRow_result() throw();
  TIOError io;

  _THBaseService_mutateRow_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_mutateRow_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_mutateRow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_mutateRow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_mutateRow_result& obj);
};

typedef struct _THBaseService_mutateRow_presult__isset {
  _THBaseService_mutateRow_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_mutateRow_presult__isset;

class THBaseService_mutateRow_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_mutateRow_presult() throw();
  TIOError io;

  _THBaseService_mutateRow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_mutateRow_presult& obj);
};

typedef struct _THBaseService_getScannerResults_args__isset {
  _THBaseService_getScannerResults_args__isset() : numRows(true) {}
  bool numRows :1;
} _THBaseService_getScannerResults_args__isset;

class THBaseService_getScannerResults_args {
 public:

  static const char* ascii_fingerprint; // = "374CE3CCDB06B8323114BFE634147F65";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x4C,0xE3,0xCC,0xDB,0x06,0xB8,0x32,0x31,0x14,0xBF,0xE6,0x34,0x14,0x7F,0x65};

  THBaseService_getScannerResults_args(const THBaseService_getScannerResults_args&);
  THBaseService_getScannerResults_args& operator=(const THBaseService_getScannerResults_args&);
  THBaseService_getScannerResults_args() : table(), numRows(1) {
  }

  virtual ~THBaseService_getScannerResults_args() throw();
  std::string table;
  TScan tscan;
  int32_t numRows;

  _THBaseService_getScannerResults_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_tscan(const TScan& val);

  void __set_numRows(const int32_t val);

  bool operator == (const THBaseService_getScannerResults_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tscan == rhs.tscan))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerResults_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerResults_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getScannerResults_args& obj);
};


class THBaseService_getScannerResults_pargs {
 public:

  static const char* ascii_fingerprint; // = "374CE3CCDB06B8323114BFE634147F65";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x4C,0xE3,0xCC,0xDB,0x06,0xB8,0x32,0x31,0x14,0xBF,0xE6,0x34,0x14,0x7F,0x65};


  virtual ~THBaseService_getScannerResults_pargs() throw();
  const std::string* table;
  const TScan* tscan;
  const int32_t* numRows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getScannerResults_pargs& obj);
};

typedef struct _THBaseService_getScannerResults_result__isset {
  _THBaseService_getScannerResults_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getScannerResults_result__isset;

class THBaseService_getScannerResults_result {
 public:

  static const char* ascii_fingerprint; // = "FC4FC405A0A6CD7CB2BB3AFC411EA556";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x4F,0xC4,0x05,0xA0,0xA6,0xCD,0x7C,0xB2,0xBB,0x3A,0xFC,0x41,0x1E,0xA5,0x56};

  THBaseService_getScannerResults_result(const THBaseService_getScannerResults_result&);
  THBaseService_getScannerResults_result& operator=(const THBaseService_getScannerResults_result&);
  THBaseService_getScannerResults_result() {
  }

  virtual ~THBaseService_getScannerResults_result() throw();
  std::vector<TResult>  success;
  TIOError io;

  _THBaseService_getScannerResults_result__isset __isset;

  void __set_success(const std::vector<TResult> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getScannerResults_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerResults_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerResults_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getScannerResults_result& obj);
};

typedef struct _THBaseService_getScannerResults_presult__isset {
  _THBaseService_getScannerResults_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getScannerResults_presult__isset;

class THBaseService_getScannerResults_presult {
 public:

  static const char* ascii_fingerprint; // = "FC4FC405A0A6CD7CB2BB3AFC411EA556";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x4F,0xC4,0x05,0xA0,0xA6,0xCD,0x7C,0xB2,0xBB,0x3A,0xFC,0x41,0x1E,0xA5,0x56};


  virtual ~THBaseService_getScannerResults_presult() throw();
  std::vector<TResult> * success;
  TIOError io;

  _THBaseService_getScannerResults_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getScannerResults_presult& obj);
};

typedef struct _THBaseService_getRegionLocation_args__isset {
  _THBaseService_getRegionLocation_args__isset() : reload(false) {}
  bool reload :1;
} _THBaseService_getRegionLocation_args__isset;

class THBaseService_getRegionLocation_args {
 public:

  static const char* ascii_fingerprint; // = "7F21FB535884165D6350077C7B970E93";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x21,0xFB,0x53,0x58,0x84,0x16,0x5D,0x63,0x50,0x07,0x7C,0x7B,0x97,0x0E,0x93};

  THBaseService_getRegionLocation_args(const THBaseService_getRegionLocation_args&);
  THBaseService_getRegionLocation_args& operator=(const THBaseService_getRegionLocation_args&);
  THBaseService_getRegionLocation_args() : table(), row(), reload(0) {
  }

  virtual ~THBaseService_getRegionLocation_args() throw();
  std::string table;
  std::string row;
  bool reload;

  _THBaseService_getRegionLocation_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_row(const std::string& val);

  void __set_reload(const bool val);

  bool operator == (const THBaseService_getRegionLocation_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(reload == rhs.reload))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getRegionLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getRegionLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getRegionLocation_args& obj);
};


class THBaseService_getRegionLocation_pargs {
 public:

  static const char* ascii_fingerprint; // = "7F21FB535884165D6350077C7B970E93";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x21,0xFB,0x53,0x58,0x84,0x16,0x5D,0x63,0x50,0x07,0x7C,0x7B,0x97,0x0E,0x93};


  virtual ~THBaseService_getRegionLocation_pargs() throw();
  const std::string* table;
  const std::string* row;
  const bool* reload;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getRegionLocation_pargs& obj);
};

typedef struct _THBaseService_getRegionLocation_result__isset {
  _THBaseService_getRegionLocation_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getRegionLocation_result__isset;

class THBaseService_getRegionLocation_result {
 public:

  static const char* ascii_fingerprint; // = "9B04CD11B8D567F6C8AC1801EA9D3AD5";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x04,0xCD,0x11,0xB8,0xD5,0x67,0xF6,0xC8,0xAC,0x18,0x01,0xEA,0x9D,0x3A,0xD5};

  THBaseService_getRegionLocation_result(const THBaseService_getRegionLocation_result&);
  THBaseService_getRegionLocation_result& operator=(const THBaseService_getRegionLocation_result&);
  THBaseService_getRegionLocation_result() {
  }

  virtual ~THBaseService_getRegionLocation_result() throw();
  THRegionLocation success;
  TIOError io;

  _THBaseService_getRegionLocation_result__isset __isset;

  void __set_success(const THRegionLocation& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getRegionLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getRegionLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getRegionLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getRegionLocation_result& obj);
};

typedef struct _THBaseService_getRegionLocation_presult__isset {
  _THBaseService_getRegionLocation_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getRegionLocation_presult__isset;

class THBaseService_getRegionLocation_presult {
 public:

  static const char* ascii_fingerprint; // = "9B04CD11B8D567F6C8AC1801EA9D3AD5";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x04,0xCD,0x11,0xB8,0xD5,0x67,0xF6,0xC8,0xAC,0x18,0x01,0xEA,0x9D,0x3A,0xD5};


  virtual ~THBaseService_getRegionLocation_presult() throw();
  THRegionLocation* success;
  TIOError io;

  _THBaseService_getRegionLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getRegionLocation_presult& obj);
};


class THBaseService_getAllRegionLocations_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  THBaseService_getAllRegionLocations_args(const THBaseService_getAllRegionLocations_args&);
  THBaseService_getAllRegionLocations_args& operator=(const THBaseService_getAllRegionLocations_args&);
  THBaseService_getAllRegionLocations_args() : table() {
  }

  virtual ~THBaseService_getAllRegionLocations_args() throw();
  std::string table;

  void __set_table(const std::string& val);

  bool operator == (const THBaseService_getAllRegionLocations_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getAllRegionLocations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getAllRegionLocations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getAllRegionLocations_args& obj);
};


class THBaseService_getAllRegionLocations_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~THBaseService_getAllRegionLocations_pargs() throw();
  const std::string* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getAllRegionLocations_pargs& obj);
};

typedef struct _THBaseService_getAllRegionLocations_result__isset {
  _THBaseService_getAllRegionLocations_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getAllRegionLocations_result__isset;

class THBaseService_getAllRegionLocations_result {
 public:

  static const char* ascii_fingerprint; // = "471409DFEEFA8A00BA3318A9EBDDCC24";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x14,0x09,0xDF,0xEE,0xFA,0x8A,0x00,0xBA,0x33,0x18,0xA9,0xEB,0xDD,0xCC,0x24};

  THBaseService_getAllRegionLocations_result(const THBaseService_getAllRegionLocations_result&);
  THBaseService_getAllRegionLocations_result& operator=(const THBaseService_getAllRegionLocations_result&);
  THBaseService_getAllRegionLocations_result() {
  }

  virtual ~THBaseService_getAllRegionLocations_result() throw();
  std::vector<THRegionLocation>  success;
  TIOError io;

  _THBaseService_getAllRegionLocations_result__isset __isset;

  void __set_success(const std::vector<THRegionLocation> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getAllRegionLocations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getAllRegionLocations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getAllRegionLocations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getAllRegionLocations_result& obj);
};

typedef struct _THBaseService_getAllRegionLocations_presult__isset {
  _THBaseService_getAllRegionLocations_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getAllRegionLocations_presult__isset;

class THBaseService_getAllRegionLocations_presult {
 public:

  static const char* ascii_fingerprint; // = "471409DFEEFA8A00BA3318A9EBDDCC24";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x14,0x09,0xDF,0xEE,0xFA,0x8A,0x00,0xBA,0x33,0x18,0xA9,0xEB,0xDD,0xCC,0x24};


  virtual ~THBaseService_getAllRegionLocations_presult() throw();
  std::vector<THRegionLocation> * success;
  TIOError io;

  _THBaseService_getAllRegionLocations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getAllRegionLocations_presult& obj);
};

typedef struct _THBaseService_checkAndMutate_args__isset {
  _THBaseService_checkAndMutate_args__isset() : value(false) {}
  bool value :1;
} _THBaseService_checkAndMutate_args__isset;

class THBaseService_checkAndMutate_args {
 public:

  static const char* ascii_fingerprint; // = "B65096B96B17F5F9ABF2BB663B809613";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x50,0x96,0xB9,0x6B,0x17,0xF5,0xF9,0xAB,0xF2,0xBB,0x66,0x3B,0x80,0x96,0x13};

  THBaseService_checkAndMutate_args(const THBaseService_checkAndMutate_args&);
  THBaseService_checkAndMutate_args& operator=(const THBaseService_checkAndMutate_args&);
  THBaseService_checkAndMutate_args() : table(), row(), family(), qualifier(), compareOp((TCompareOp::type)0), value() {
  }

  virtual ~THBaseService_checkAndMutate_args() throw();
  std::string table;
  std::string row;
  std::string family;
  std::string qualifier;
  TCompareOp::type compareOp;
  std::string value;
  TRowMutations rowMutations;

  _THBaseService_checkAndMutate_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_row(const std::string& val);

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_compareOp(const TCompareOp::type val);

  void __set_value(const std::string& val);

  void __set_rowMutations(const TRowMutations& val);

  bool operator == (const THBaseService_checkAndMutate_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(compareOp == rhs.compareOp))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(rowMutations == rhs.rowMutations))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndMutate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndMutate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndMutate_args& obj);
};


class THBaseService_checkAndMutate_pargs {
 public:

  static const char* ascii_fingerprint; // = "B65096B96B17F5F9ABF2BB663B809613";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x50,0x96,0xB9,0x6B,0x17,0xF5,0xF9,0xAB,0xF2,0xBB,0x66,0x3B,0x80,0x96,0x13};


  virtual ~THBaseService_checkAndMutate_pargs() throw();
  const std::string* table;
  const std::string* row;
  const std::string* family;
  const std::string* qualifier;
  const TCompareOp::type* compareOp;
  const std::string* value;
  const TRowMutations* rowMutations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndMutate_pargs& obj);
};

typedef struct _THBaseService_checkAndMutate_result__isset {
  _THBaseService_checkAndMutate_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndMutate_result__isset;

class THBaseService_checkAndMutate_result {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};

  THBaseService_checkAndMutate_result(const THBaseService_checkAndMutate_result&);
  THBaseService_checkAndMutate_result& operator=(const THBaseService_checkAndMutate_result&);
  THBaseService_checkAndMutate_result() : success(0) {
  }

  virtual ~THBaseService_checkAndMutate_result() throw();
  bool success;
  TIOError io;

  _THBaseService_checkAndMutate_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_checkAndMutate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndMutate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndMutate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndMutate_result& obj);
};

typedef struct _THBaseService_checkAndMutate_presult__isset {
  _THBaseService_checkAndMutate_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndMutate_presult__isset;

class THBaseService_checkAndMutate_presult {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};


  virtual ~THBaseService_checkAndMutate_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_checkAndMutate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_checkAndMutate_presult& obj);
};


class THBaseService_getTableDescriptor_args {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};

  THBaseService_getTableDescriptor_args(const THBaseService_getTableDescriptor_args&);
  THBaseService_getTableDescriptor_args& operator=(const THBaseService_getTableDescriptor_args&);
  THBaseService_getTableDescriptor_args() {
  }

  virtual ~THBaseService_getTableDescriptor_args() throw();
  TTableName table;

  void __set_table(const TTableName& val);

  bool operator == (const THBaseService_getTableDescriptor_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableDescriptor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableDescriptor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptor_args& obj);
};


class THBaseService_getTableDescriptor_pargs {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};


  virtual ~THBaseService_getTableDescriptor_pargs() throw();
  const TTableName* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptor_pargs& obj);
};

typedef struct _THBaseService_getTableDescriptor_result__isset {
  _THBaseService_getTableDescriptor_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableDescriptor_result__isset;

class THBaseService_getTableDescriptor_result {
 public:

  static const char* ascii_fingerprint; // = "41091A8E705FA642D445BE9581FCE1F5";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0x09,0x1A,0x8E,0x70,0x5F,0xA6,0x42,0xD4,0x45,0xBE,0x95,0x81,0xFC,0xE1,0xF5};

  THBaseService_getTableDescriptor_result(const THBaseService_getTableDescriptor_result&);
  THBaseService_getTableDescriptor_result& operator=(const THBaseService_getTableDescriptor_result&);
  THBaseService_getTableDescriptor_result() {
  }

  virtual ~THBaseService_getTableDescriptor_result() throw();
  TTableDescriptor success;
  TIOError io;

  _THBaseService_getTableDescriptor_result__isset __isset;

  void __set_success(const TTableDescriptor& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getTableDescriptor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableDescriptor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableDescriptor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptor_result& obj);
};

typedef struct _THBaseService_getTableDescriptor_presult__isset {
  _THBaseService_getTableDescriptor_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableDescriptor_presult__isset;

class THBaseService_getTableDescriptor_presult {
 public:

  static const char* ascii_fingerprint; // = "41091A8E705FA642D445BE9581FCE1F5";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0x09,0x1A,0x8E,0x70,0x5F,0xA6,0x42,0xD4,0x45,0xBE,0x95,0x81,0xFC,0xE1,0xF5};


  virtual ~THBaseService_getTableDescriptor_presult() throw();
  TTableDescriptor* success;
  TIOError io;

  _THBaseService_getTableDescriptor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptor_presult& obj);
};


class THBaseService_getTableDescriptors_args {
 public:

  static const char* ascii_fingerprint; // = "191DF4CC91E0A4AB5A90E8AF3561EF14";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x1D,0xF4,0xCC,0x91,0xE0,0xA4,0xAB,0x5A,0x90,0xE8,0xAF,0x35,0x61,0xEF,0x14};

  THBaseService_getTableDescriptors_args(const THBaseService_getTableDescriptors_args&);
  THBaseService_getTableDescriptors_args& operator=(const THBaseService_getTableDescriptors_args&);
  THBaseService_getTableDescriptors_args() {
  }

  virtual ~THBaseService_getTableDescriptors_args() throw();
  std::vector<TTableName>  tables;

  void __set_tables(const std::vector<TTableName> & val);

  bool operator == (const THBaseService_getTableDescriptors_args & rhs) const
  {
    if (!(tables == rhs.tables))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableDescriptors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableDescriptors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptors_args& obj);
};


class THBaseService_getTableDescriptors_pargs {
 public:

  static const char* ascii_fingerprint; // = "191DF4CC91E0A4AB5A90E8AF3561EF14";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x1D,0xF4,0xCC,0x91,0xE0,0xA4,0xAB,0x5A,0x90,0xE8,0xAF,0x35,0x61,0xEF,0x14};


  virtual ~THBaseService_getTableDescriptors_pargs() throw();
  const std::vector<TTableName> * tables;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptors_pargs& obj);
};

typedef struct _THBaseService_getTableDescriptors_result__isset {
  _THBaseService_getTableDescriptors_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableDescriptors_result__isset;

class THBaseService_getTableDescriptors_result {
 public:

  static const char* ascii_fingerprint; // = "D225DCDF7D30933E77D82F6C50BC95E7";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x25,0xDC,0xDF,0x7D,0x30,0x93,0x3E,0x77,0xD8,0x2F,0x6C,0x50,0xBC,0x95,0xE7};

  THBaseService_getTableDescriptors_result(const THBaseService_getTableDescriptors_result&);
  THBaseService_getTableDescriptors_result& operator=(const THBaseService_getTableDescriptors_result&);
  THBaseService_getTableDescriptors_result() {
  }

  virtual ~THBaseService_getTableDescriptors_result() throw();
  std::vector<TTableDescriptor>  success;
  TIOError io;

  _THBaseService_getTableDescriptors_result__isset __isset;

  void __set_success(const std::vector<TTableDescriptor> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getTableDescriptors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableDescriptors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableDescriptors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptors_result& obj);
};

typedef struct _THBaseService_getTableDescriptors_presult__isset {
  _THBaseService_getTableDescriptors_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableDescriptors_presult__isset;

class THBaseService_getTableDescriptors_presult {
 public:

  static const char* ascii_fingerprint; // = "D225DCDF7D30933E77D82F6C50BC95E7";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x25,0xDC,0xDF,0x7D,0x30,0x93,0x3E,0x77,0xD8,0x2F,0x6C,0x50,0xBC,0x95,0xE7};


  virtual ~THBaseService_getTableDescriptors_presult() throw();
  std::vector<TTableDescriptor> * success;
  TIOError io;

  _THBaseService_getTableDescriptors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptors_presult& obj);
};

typedef struct _THBaseService_tableExists_args__isset {
  _THBaseService_tableExists_args__isset() : tableName(false) {}
  bool tableName :1;
} _THBaseService_tableExists_args__isset;

class THBaseService_tableExists_args {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};

  THBaseService_tableExists_args(const THBaseService_tableExists_args&);
  THBaseService_tableExists_args& operator=(const THBaseService_tableExists_args&);
  THBaseService_tableExists_args() {
  }

  virtual ~THBaseService_tableExists_args() throw();
  TTableName tableName;

  _THBaseService_tableExists_args__isset __isset;

  void __set_tableName(const TTableName& val);

  bool operator == (const THBaseService_tableExists_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const THBaseService_tableExists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_tableExists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_tableExists_args& obj);
};


class THBaseService_tableExists_pargs {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};


  virtual ~THBaseService_tableExists_pargs() throw();
  const TTableName* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_tableExists_pargs& obj);
};

typedef struct _THBaseService_tableExists_result__isset {
  _THBaseService_tableExists_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_tableExists_result__isset;

class THBaseService_tableExists_result {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};

  THBaseService_tableExists_result(const THBaseService_tableExists_result&);
  THBaseService_tableExists_result& operator=(const THBaseService_tableExists_result&);
  THBaseService_tableExists_result() : success(0) {
  }

  virtual ~THBaseService_tableExists_result() throw();
  bool success;
  TIOError io;

  _THBaseService_tableExists_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_tableExists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_tableExists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_tableExists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_tableExists_result& obj);
};

typedef struct _THBaseService_tableExists_presult__isset {
  _THBaseService_tableExists_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_tableExists_presult__isset;

class THBaseService_tableExists_presult {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};


  virtual ~THBaseService_tableExists_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_tableExists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_tableExists_presult& obj);
};

typedef struct _THBaseService_getTableDescriptorsByPattern_args__isset {
  _THBaseService_getTableDescriptorsByPattern_args__isset() : regex(false) {}
  bool regex :1;
} _THBaseService_getTableDescriptorsByPattern_args__isset;

class THBaseService_getTableDescriptorsByPattern_args {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  THBaseService_getTableDescriptorsByPattern_args(const THBaseService_getTableDescriptorsByPattern_args&);
  THBaseService_getTableDescriptorsByPattern_args& operator=(const THBaseService_getTableDescriptorsByPattern_args&);
  THBaseService_getTableDescriptorsByPattern_args() : regex(), includeSysTables(0) {
  }

  virtual ~THBaseService_getTableDescriptorsByPattern_args() throw();
  std::string regex;
  bool includeSysTables;

  _THBaseService_getTableDescriptorsByPattern_args__isset __isset;

  void __set_regex(const std::string& val);

  void __set_includeSysTables(const bool val);

  bool operator == (const THBaseService_getTableDescriptorsByPattern_args & rhs) const
  {
    if (!(regex == rhs.regex))
      return false;
    if (!(includeSysTables == rhs.includeSysTables))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableDescriptorsByPattern_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableDescriptorsByPattern_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptorsByPattern_args& obj);
};


class THBaseService_getTableDescriptorsByPattern_pargs {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};


  virtual ~THBaseService_getTableDescriptorsByPattern_pargs() throw();
  const std::string* regex;
  const bool* includeSysTables;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptorsByPattern_pargs& obj);
};

typedef struct _THBaseService_getTableDescriptorsByPattern_result__isset {
  _THBaseService_getTableDescriptorsByPattern_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableDescriptorsByPattern_result__isset;

class THBaseService_getTableDescriptorsByPattern_result {
 public:

  static const char* ascii_fingerprint; // = "D225DCDF7D30933E77D82F6C50BC95E7";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x25,0xDC,0xDF,0x7D,0x30,0x93,0x3E,0x77,0xD8,0x2F,0x6C,0x50,0xBC,0x95,0xE7};

  THBaseService_getTableDescriptorsByPattern_result(const THBaseService_getTableDescriptorsByPattern_result&);
  THBaseService_getTableDescriptorsByPattern_result& operator=(const THBaseService_getTableDescriptorsByPattern_result&);
  THBaseService_getTableDescriptorsByPattern_result() {
  }

  virtual ~THBaseService_getTableDescriptorsByPattern_result() throw();
  std::vector<TTableDescriptor>  success;
  TIOError io;

  _THBaseService_getTableDescriptorsByPattern_result__isset __isset;

  void __set_success(const std::vector<TTableDescriptor> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getTableDescriptorsByPattern_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableDescriptorsByPattern_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableDescriptorsByPattern_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptorsByPattern_result& obj);
};

typedef struct _THBaseService_getTableDescriptorsByPattern_presult__isset {
  _THBaseService_getTableDescriptorsByPattern_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableDescriptorsByPattern_presult__isset;

class THBaseService_getTableDescriptorsByPattern_presult {
 public:

  static const char* ascii_fingerprint; // = "D225DCDF7D30933E77D82F6C50BC95E7";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x25,0xDC,0xDF,0x7D,0x30,0x93,0x3E,0x77,0xD8,0x2F,0x6C,0x50,0xBC,0x95,0xE7};


  virtual ~THBaseService_getTableDescriptorsByPattern_presult() throw();
  std::vector<TTableDescriptor> * success;
  TIOError io;

  _THBaseService_getTableDescriptorsByPattern_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptorsByPattern_presult& obj);
};


class THBaseService_getTableDescriptorsByNamespace_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  THBaseService_getTableDescriptorsByNamespace_args(const THBaseService_getTableDescriptorsByNamespace_args&);
  THBaseService_getTableDescriptorsByNamespace_args& operator=(const THBaseService_getTableDescriptorsByNamespace_args&);
  THBaseService_getTableDescriptorsByNamespace_args() : name() {
  }

  virtual ~THBaseService_getTableDescriptorsByNamespace_args() throw();
  std::string name;

  void __set_name(const std::string& val);

  bool operator == (const THBaseService_getTableDescriptorsByNamespace_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableDescriptorsByNamespace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableDescriptorsByNamespace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptorsByNamespace_args& obj);
};


class THBaseService_getTableDescriptorsByNamespace_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~THBaseService_getTableDescriptorsByNamespace_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptorsByNamespace_pargs& obj);
};

typedef struct _THBaseService_getTableDescriptorsByNamespace_result__isset {
  _THBaseService_getTableDescriptorsByNamespace_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableDescriptorsByNamespace_result__isset;

class THBaseService_getTableDescriptorsByNamespace_result {
 public:

  static const char* ascii_fingerprint; // = "D225DCDF7D30933E77D82F6C50BC95E7";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x25,0xDC,0xDF,0x7D,0x30,0x93,0x3E,0x77,0xD8,0x2F,0x6C,0x50,0xBC,0x95,0xE7};

  THBaseService_getTableDescriptorsByNamespace_result(const THBaseService_getTableDescriptorsByNamespace_result&);
  THBaseService_getTableDescriptorsByNamespace_result& operator=(const THBaseService_getTableDescriptorsByNamespace_result&);
  THBaseService_getTableDescriptorsByNamespace_result() {
  }

  virtual ~THBaseService_getTableDescriptorsByNamespace_result() throw();
  std::vector<TTableDescriptor>  success;
  TIOError io;

  _THBaseService_getTableDescriptorsByNamespace_result__isset __isset;

  void __set_success(const std::vector<TTableDescriptor> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getTableDescriptorsByNamespace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableDescriptorsByNamespace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableDescriptorsByNamespace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptorsByNamespace_result& obj);
};

typedef struct _THBaseService_getTableDescriptorsByNamespace_presult__isset {
  _THBaseService_getTableDescriptorsByNamespace_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableDescriptorsByNamespace_presult__isset;

class THBaseService_getTableDescriptorsByNamespace_presult {
 public:

  static const char* ascii_fingerprint; // = "D225DCDF7D30933E77D82F6C50BC95E7";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x25,0xDC,0xDF,0x7D,0x30,0x93,0x3E,0x77,0xD8,0x2F,0x6C,0x50,0xBC,0x95,0xE7};


  virtual ~THBaseService_getTableDescriptorsByNamespace_presult() throw();
  std::vector<TTableDescriptor> * success;
  TIOError io;

  _THBaseService_getTableDescriptorsByNamespace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableDescriptorsByNamespace_presult& obj);
};

typedef struct _THBaseService_getTableNamesByPattern_args__isset {
  _THBaseService_getTableNamesByPattern_args__isset() : regex(false) {}
  bool regex :1;
} _THBaseService_getTableNamesByPattern_args__isset;

class THBaseService_getTableNamesByPattern_args {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  THBaseService_getTableNamesByPattern_args(const THBaseService_getTableNamesByPattern_args&);
  THBaseService_getTableNamesByPattern_args& operator=(const THBaseService_getTableNamesByPattern_args&);
  THBaseService_getTableNamesByPattern_args() : regex(), includeSysTables(0) {
  }

  virtual ~THBaseService_getTableNamesByPattern_args() throw();
  std::string regex;
  bool includeSysTables;

  _THBaseService_getTableNamesByPattern_args__isset __isset;

  void __set_regex(const std::string& val);

  void __set_includeSysTables(const bool val);

  bool operator == (const THBaseService_getTableNamesByPattern_args & rhs) const
  {
    if (!(regex == rhs.regex))
      return false;
    if (!(includeSysTables == rhs.includeSysTables))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableNamesByPattern_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableNamesByPattern_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableNamesByPattern_args& obj);
};


class THBaseService_getTableNamesByPattern_pargs {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};


  virtual ~THBaseService_getTableNamesByPattern_pargs() throw();
  const std::string* regex;
  const bool* includeSysTables;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableNamesByPattern_pargs& obj);
};

typedef struct _THBaseService_getTableNamesByPattern_result__isset {
  _THBaseService_getTableNamesByPattern_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableNamesByPattern_result__isset;

class THBaseService_getTableNamesByPattern_result {
 public:

  static const char* ascii_fingerprint; // = "C465C773A107F927E81338F401811981";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x65,0xC7,0x73,0xA1,0x07,0xF9,0x27,0xE8,0x13,0x38,0xF4,0x01,0x81,0x19,0x81};

  THBaseService_getTableNamesByPattern_result(const THBaseService_getTableNamesByPattern_result&);
  THBaseService_getTableNamesByPattern_result& operator=(const THBaseService_getTableNamesByPattern_result&);
  THBaseService_getTableNamesByPattern_result() {
  }

  virtual ~THBaseService_getTableNamesByPattern_result() throw();
  std::vector<TTableName>  success;
  TIOError io;

  _THBaseService_getTableNamesByPattern_result__isset __isset;

  void __set_success(const std::vector<TTableName> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getTableNamesByPattern_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableNamesByPattern_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableNamesByPattern_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableNamesByPattern_result& obj);
};

typedef struct _THBaseService_getTableNamesByPattern_presult__isset {
  _THBaseService_getTableNamesByPattern_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableNamesByPattern_presult__isset;

class THBaseService_getTableNamesByPattern_presult {
 public:

  static const char* ascii_fingerprint; // = "C465C773A107F927E81338F401811981";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x65,0xC7,0x73,0xA1,0x07,0xF9,0x27,0xE8,0x13,0x38,0xF4,0x01,0x81,0x19,0x81};


  virtual ~THBaseService_getTableNamesByPattern_presult() throw();
  std::vector<TTableName> * success;
  TIOError io;

  _THBaseService_getTableNamesByPattern_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableNamesByPattern_presult& obj);
};


class THBaseService_getTableNamesByNamespace_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  THBaseService_getTableNamesByNamespace_args(const THBaseService_getTableNamesByNamespace_args&);
  THBaseService_getTableNamesByNamespace_args& operator=(const THBaseService_getTableNamesByNamespace_args&);
  THBaseService_getTableNamesByNamespace_args() : name() {
  }

  virtual ~THBaseService_getTableNamesByNamespace_args() throw();
  std::string name;

  void __set_name(const std::string& val);

  bool operator == (const THBaseService_getTableNamesByNamespace_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableNamesByNamespace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableNamesByNamespace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableNamesByNamespace_args& obj);
};


class THBaseService_getTableNamesByNamespace_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~THBaseService_getTableNamesByNamespace_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableNamesByNamespace_pargs& obj);
};

typedef struct _THBaseService_getTableNamesByNamespace_result__isset {
  _THBaseService_getTableNamesByNamespace_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableNamesByNamespace_result__isset;

class THBaseService_getTableNamesByNamespace_result {
 public:

  static const char* ascii_fingerprint; // = "C465C773A107F927E81338F401811981";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x65,0xC7,0x73,0xA1,0x07,0xF9,0x27,0xE8,0x13,0x38,0xF4,0x01,0x81,0x19,0x81};

  THBaseService_getTableNamesByNamespace_result(const THBaseService_getTableNamesByNamespace_result&);
  THBaseService_getTableNamesByNamespace_result& operator=(const THBaseService_getTableNamesByNamespace_result&);
  THBaseService_getTableNamesByNamespace_result() {
  }

  virtual ~THBaseService_getTableNamesByNamespace_result() throw();
  std::vector<TTableName>  success;
  TIOError io;

  _THBaseService_getTableNamesByNamespace_result__isset __isset;

  void __set_success(const std::vector<TTableName> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getTableNamesByNamespace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getTableNamesByNamespace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getTableNamesByNamespace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableNamesByNamespace_result& obj);
};

typedef struct _THBaseService_getTableNamesByNamespace_presult__isset {
  _THBaseService_getTableNamesByNamespace_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getTableNamesByNamespace_presult__isset;

class THBaseService_getTableNamesByNamespace_presult {
 public:

  static const char* ascii_fingerprint; // = "C465C773A107F927E81338F401811981";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x65,0xC7,0x73,0xA1,0x07,0xF9,0x27,0xE8,0x13,0x38,0xF4,0x01,0x81,0x19,0x81};


  virtual ~THBaseService_getTableNamesByNamespace_presult() throw();
  std::vector<TTableName> * success;
  TIOError io;

  _THBaseService_getTableNamesByNamespace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getTableNamesByNamespace_presult& obj);
};

typedef struct _THBaseService_createTable_args__isset {
  _THBaseService_createTable_args__isset() : splitKeys(false) {}
  bool splitKeys :1;
} _THBaseService_createTable_args__isset;

class THBaseService_createTable_args {
 public:

  static const char* ascii_fingerprint; // = "F14A00453FF231E3018F789E60E09EE2";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x4A,0x00,0x45,0x3F,0xF2,0x31,0xE3,0x01,0x8F,0x78,0x9E,0x60,0xE0,0x9E,0xE2};

  THBaseService_createTable_args(const THBaseService_createTable_args&);
  THBaseService_createTable_args& operator=(const THBaseService_createTable_args&);
  THBaseService_createTable_args() {
  }

  virtual ~THBaseService_createTable_args() throw();
  TTableDescriptor desc;
  std::vector<std::string>  splitKeys;

  _THBaseService_createTable_args__isset __isset;

  void __set_desc(const TTableDescriptor& val);

  void __set_splitKeys(const std::vector<std::string> & val);

  bool operator == (const THBaseService_createTable_args & rhs) const
  {
    if (!(desc == rhs.desc))
      return false;
    if (!(splitKeys == rhs.splitKeys))
      return false;
    return true;
  }
  bool operator != (const THBaseService_createTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_createTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_createTable_args& obj);
};


class THBaseService_createTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "F14A00453FF231E3018F789E60E09EE2";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x4A,0x00,0x45,0x3F,0xF2,0x31,0xE3,0x01,0x8F,0x78,0x9E,0x60,0xE0,0x9E,0xE2};


  virtual ~THBaseService_createTable_pargs() throw();
  const TTableDescriptor* desc;
  const std::vector<std::string> * splitKeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_createTable_pargs& obj);
};

typedef struct _THBaseService_createTable_result__isset {
  _THBaseService_createTable_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_createTable_result__isset;

class THBaseService_createTable_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_createTable_result(const THBaseService_createTable_result&);
  THBaseService_createTable_result& operator=(const THBaseService_createTable_result&);
  THBaseService_createTable_result() {
  }

  virtual ~THBaseService_createTable_result() throw();
  TIOError io;

  _THBaseService_createTable_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_createTable_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_createTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_createTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_createTable_result& obj);
};

typedef struct _THBaseService_createTable_presult__isset {
  _THBaseService_createTable_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_createTable_presult__isset;

class THBaseService_createTable_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_createTable_presult() throw();
  TIOError io;

  _THBaseService_createTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_createTable_presult& obj);
};


class THBaseService_deleteTable_args {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};

  THBaseService_deleteTable_args(const THBaseService_deleteTable_args&);
  THBaseService_deleteTable_args& operator=(const THBaseService_deleteTable_args&);
  THBaseService_deleteTable_args() {
  }

  virtual ~THBaseService_deleteTable_args() throw();
  TTableName tableName;

  void __set_tableName(const TTableName& val);

  bool operator == (const THBaseService_deleteTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteTable_args& obj);
};


class THBaseService_deleteTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};


  virtual ~THBaseService_deleteTable_pargs() throw();
  const TTableName* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteTable_pargs& obj);
};

typedef struct _THBaseService_deleteTable_result__isset {
  _THBaseService_deleteTable_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteTable_result__isset;

class THBaseService_deleteTable_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_deleteTable_result(const THBaseService_deleteTable_result&);
  THBaseService_deleteTable_result& operator=(const THBaseService_deleteTable_result&);
  THBaseService_deleteTable_result() {
  }

  virtual ~THBaseService_deleteTable_result() throw();
  TIOError io;

  _THBaseService_deleteTable_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_deleteTable_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteTable_result& obj);
};

typedef struct _THBaseService_deleteTable_presult__isset {
  _THBaseService_deleteTable_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteTable_presult__isset;

class THBaseService_deleteTable_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_deleteTable_presult() throw();
  TIOError io;

  _THBaseService_deleteTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteTable_presult& obj);
};


class THBaseService_truncateTable_args {
 public:

  static const char* ascii_fingerprint; // = "507564D7789EF557CA62C0CEF42D4BAF";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x75,0x64,0xD7,0x78,0x9E,0xF5,0x57,0xCA,0x62,0xC0,0xCE,0xF4,0x2D,0x4B,0xAF};

  THBaseService_truncateTable_args(const THBaseService_truncateTable_args&);
  THBaseService_truncateTable_args& operator=(const THBaseService_truncateTable_args&);
  THBaseService_truncateTable_args() : preserveSplits(0) {
  }

  virtual ~THBaseService_truncateTable_args() throw();
  TTableName tableName;
  bool preserveSplits;

  void __set_tableName(const TTableName& val);

  void __set_preserveSplits(const bool val);

  bool operator == (const THBaseService_truncateTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(preserveSplits == rhs.preserveSplits))
      return false;
    return true;
  }
  bool operator != (const THBaseService_truncateTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_truncateTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_truncateTable_args& obj);
};


class THBaseService_truncateTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "507564D7789EF557CA62C0CEF42D4BAF";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x75,0x64,0xD7,0x78,0x9E,0xF5,0x57,0xCA,0x62,0xC0,0xCE,0xF4,0x2D,0x4B,0xAF};


  virtual ~THBaseService_truncateTable_pargs() throw();
  const TTableName* tableName;
  const bool* preserveSplits;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_truncateTable_pargs& obj);
};

typedef struct _THBaseService_truncateTable_result__isset {
  _THBaseService_truncateTable_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_truncateTable_result__isset;

class THBaseService_truncateTable_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_truncateTable_result(const THBaseService_truncateTable_result&);
  THBaseService_truncateTable_result& operator=(const THBaseService_truncateTable_result&);
  THBaseService_truncateTable_result() {
  }

  virtual ~THBaseService_truncateTable_result() throw();
  TIOError io;

  _THBaseService_truncateTable_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_truncateTable_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_truncateTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_truncateTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_truncateTable_result& obj);
};

typedef struct _THBaseService_truncateTable_presult__isset {
  _THBaseService_truncateTable_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_truncateTable_presult__isset;

class THBaseService_truncateTable_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_truncateTable_presult() throw();
  TIOError io;

  _THBaseService_truncateTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_truncateTable_presult& obj);
};


class THBaseService_enableTable_args {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};

  THBaseService_enableTable_args(const THBaseService_enableTable_args&);
  THBaseService_enableTable_args& operator=(const THBaseService_enableTable_args&);
  THBaseService_enableTable_args() {
  }

  virtual ~THBaseService_enableTable_args() throw();
  TTableName tableName;

  void __set_tableName(const TTableName& val);

  bool operator == (const THBaseService_enableTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const THBaseService_enableTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_enableTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_enableTable_args& obj);
};


class THBaseService_enableTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};


  virtual ~THBaseService_enableTable_pargs() throw();
  const TTableName* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_enableTable_pargs& obj);
};

typedef struct _THBaseService_enableTable_result__isset {
  _THBaseService_enableTable_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_enableTable_result__isset;

class THBaseService_enableTable_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_enableTable_result(const THBaseService_enableTable_result&);
  THBaseService_enableTable_result& operator=(const THBaseService_enableTable_result&);
  THBaseService_enableTable_result() {
  }

  virtual ~THBaseService_enableTable_result() throw();
  TIOError io;

  _THBaseService_enableTable_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_enableTable_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_enableTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_enableTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_enableTable_result& obj);
};

typedef struct _THBaseService_enableTable_presult__isset {
  _THBaseService_enableTable_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_enableTable_presult__isset;

class THBaseService_enableTable_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_enableTable_presult() throw();
  TIOError io;

  _THBaseService_enableTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_enableTable_presult& obj);
};


class THBaseService_disableTable_args {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};

  THBaseService_disableTable_args(const THBaseService_disableTable_args&);
  THBaseService_disableTable_args& operator=(const THBaseService_disableTable_args&);
  THBaseService_disableTable_args() {
  }

  virtual ~THBaseService_disableTable_args() throw();
  TTableName tableName;

  void __set_tableName(const TTableName& val);

  bool operator == (const THBaseService_disableTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const THBaseService_disableTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_disableTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_disableTable_args& obj);
};


class THBaseService_disableTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};


  virtual ~THBaseService_disableTable_pargs() throw();
  const TTableName* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_disableTable_pargs& obj);
};

typedef struct _THBaseService_disableTable_result__isset {
  _THBaseService_disableTable_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_disableTable_result__isset;

class THBaseService_disableTable_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_disableTable_result(const THBaseService_disableTable_result&);
  THBaseService_disableTable_result& operator=(const THBaseService_disableTable_result&);
  THBaseService_disableTable_result() {
  }

  virtual ~THBaseService_disableTable_result() throw();
  TIOError io;

  _THBaseService_disableTable_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_disableTable_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_disableTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_disableTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_disableTable_result& obj);
};

typedef struct _THBaseService_disableTable_presult__isset {
  _THBaseService_disableTable_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_disableTable_presult__isset;

class THBaseService_disableTable_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_disableTable_presult() throw();
  TIOError io;

  _THBaseService_disableTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_disableTable_presult& obj);
};


class THBaseService_isTableEnabled_args {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};

  THBaseService_isTableEnabled_args(const THBaseService_isTableEnabled_args&);
  THBaseService_isTableEnabled_args& operator=(const THBaseService_isTableEnabled_args&);
  THBaseService_isTableEnabled_args() {
  }

  virtual ~THBaseService_isTableEnabled_args() throw();
  TTableName tableName;

  void __set_tableName(const TTableName& val);

  bool operator == (const THBaseService_isTableEnabled_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const THBaseService_isTableEnabled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_isTableEnabled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableEnabled_args& obj);
};


class THBaseService_isTableEnabled_pargs {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};


  virtual ~THBaseService_isTableEnabled_pargs() throw();
  const TTableName* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableEnabled_pargs& obj);
};

typedef struct _THBaseService_isTableEnabled_result__isset {
  _THBaseService_isTableEnabled_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_isTableEnabled_result__isset;

class THBaseService_isTableEnabled_result {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};

  THBaseService_isTableEnabled_result(const THBaseService_isTableEnabled_result&);
  THBaseService_isTableEnabled_result& operator=(const THBaseService_isTableEnabled_result&);
  THBaseService_isTableEnabled_result() : success(0) {
  }

  virtual ~THBaseService_isTableEnabled_result() throw();
  bool success;
  TIOError io;

  _THBaseService_isTableEnabled_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_isTableEnabled_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_isTableEnabled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_isTableEnabled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableEnabled_result& obj);
};

typedef struct _THBaseService_isTableEnabled_presult__isset {
  _THBaseService_isTableEnabled_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_isTableEnabled_presult__isset;

class THBaseService_isTableEnabled_presult {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};


  virtual ~THBaseService_isTableEnabled_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_isTableEnabled_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableEnabled_presult& obj);
};


class THBaseService_isTableDisabled_args {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};

  THBaseService_isTableDisabled_args(const THBaseService_isTableDisabled_args&);
  THBaseService_isTableDisabled_args& operator=(const THBaseService_isTableDisabled_args&);
  THBaseService_isTableDisabled_args() {
  }

  virtual ~THBaseService_isTableDisabled_args() throw();
  TTableName tableName;

  void __set_tableName(const TTableName& val);

  bool operator == (const THBaseService_isTableDisabled_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const THBaseService_isTableDisabled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_isTableDisabled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableDisabled_args& obj);
};


class THBaseService_isTableDisabled_pargs {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};


  virtual ~THBaseService_isTableDisabled_pargs() throw();
  const TTableName* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableDisabled_pargs& obj);
};

typedef struct _THBaseService_isTableDisabled_result__isset {
  _THBaseService_isTableDisabled_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_isTableDisabled_result__isset;

class THBaseService_isTableDisabled_result {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};

  THBaseService_isTableDisabled_result(const THBaseService_isTableDisabled_result&);
  THBaseService_isTableDisabled_result& operator=(const THBaseService_isTableDisabled_result&);
  THBaseService_isTableDisabled_result() : success(0) {
  }

  virtual ~THBaseService_isTableDisabled_result() throw();
  bool success;
  TIOError io;

  _THBaseService_isTableDisabled_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_isTableDisabled_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_isTableDisabled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_isTableDisabled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableDisabled_result& obj);
};

typedef struct _THBaseService_isTableDisabled_presult__isset {
  _THBaseService_isTableDisabled_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_isTableDisabled_presult__isset;

class THBaseService_isTableDisabled_presult {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};


  virtual ~THBaseService_isTableDisabled_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_isTableDisabled_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableDisabled_presult& obj);
};


class THBaseService_isTableAvailable_args {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};

  THBaseService_isTableAvailable_args(const THBaseService_isTableAvailable_args&);
  THBaseService_isTableAvailable_args& operator=(const THBaseService_isTableAvailable_args&);
  THBaseService_isTableAvailable_args() {
  }

  virtual ~THBaseService_isTableAvailable_args() throw();
  TTableName tableName;

  void __set_tableName(const TTableName& val);

  bool operator == (const THBaseService_isTableAvailable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const THBaseService_isTableAvailable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_isTableAvailable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableAvailable_args& obj);
};


class THBaseService_isTableAvailable_pargs {
 public:

  static const char* ascii_fingerprint; // = "68397BABCC9D061EBC53A1DC302038A8";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x39,0x7B,0xAB,0xCC,0x9D,0x06,0x1E,0xBC,0x53,0xA1,0xDC,0x30,0x20,0x38,0xA8};


  virtual ~THBaseService_isTableAvailable_pargs() throw();
  const TTableName* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableAvailable_pargs& obj);
};

typedef struct _THBaseService_isTableAvailable_result__isset {
  _THBaseService_isTableAvailable_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_isTableAvailable_result__isset;

class THBaseService_isTableAvailable_result {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};

  THBaseService_isTableAvailable_result(const THBaseService_isTableAvailable_result&);
  THBaseService_isTableAvailable_result& operator=(const THBaseService_isTableAvailable_result&);
  THBaseService_isTableAvailable_result() : success(0) {
  }

  virtual ~THBaseService_isTableAvailable_result() throw();
  bool success;
  TIOError io;

  _THBaseService_isTableAvailable_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_isTableAvailable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_isTableAvailable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_isTableAvailable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableAvailable_result& obj);
};

typedef struct _THBaseService_isTableAvailable_presult__isset {
  _THBaseService_isTableAvailable_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_isTableAvailable_presult__isset;

class THBaseService_isTableAvailable_presult {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};


  virtual ~THBaseService_isTableAvailable_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_isTableAvailable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableAvailable_presult& obj);
};

typedef struct _THBaseService_isTableAvailableWithSplit_args__isset {
  _THBaseService_isTableAvailableWithSplit_args__isset() : splitKeys(false) {}
  bool splitKeys :1;
} _THBaseService_isTableAvailableWithSplit_args__isset;

class THBaseService_isTableAvailableWithSplit_args {
 public:

  static const char* ascii_fingerprint; // = "E00A2CCBFD47E102F16050E7C53C46D7";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x0A,0x2C,0xCB,0xFD,0x47,0xE1,0x02,0xF1,0x60,0x50,0xE7,0xC5,0x3C,0x46,0xD7};

  THBaseService_isTableAvailableWithSplit_args(const THBaseService_isTableAvailableWithSplit_args&);
  THBaseService_isTableAvailableWithSplit_args& operator=(const THBaseService_isTableAvailableWithSplit_args&);
  THBaseService_isTableAvailableWithSplit_args() {
  }

  virtual ~THBaseService_isTableAvailableWithSplit_args() throw();
  TTableName tableName;
  std::vector<std::string>  splitKeys;

  _THBaseService_isTableAvailableWithSplit_args__isset __isset;

  void __set_tableName(const TTableName& val);

  void __set_splitKeys(const std::vector<std::string> & val);

  bool operator == (const THBaseService_isTableAvailableWithSplit_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(splitKeys == rhs.splitKeys))
      return false;
    return true;
  }
  bool operator != (const THBaseService_isTableAvailableWithSplit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_isTableAvailableWithSplit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableAvailableWithSplit_args& obj);
};


class THBaseService_isTableAvailableWithSplit_pargs {
 public:

  static const char* ascii_fingerprint; // = "E00A2CCBFD47E102F16050E7C53C46D7";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x0A,0x2C,0xCB,0xFD,0x47,0xE1,0x02,0xF1,0x60,0x50,0xE7,0xC5,0x3C,0x46,0xD7};


  virtual ~THBaseService_isTableAvailableWithSplit_pargs() throw();
  const TTableName* tableName;
  const std::vector<std::string> * splitKeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableAvailableWithSplit_pargs& obj);
};

typedef struct _THBaseService_isTableAvailableWithSplit_result__isset {
  _THBaseService_isTableAvailableWithSplit_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_isTableAvailableWithSplit_result__isset;

class THBaseService_isTableAvailableWithSplit_result {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};

  THBaseService_isTableAvailableWithSplit_result(const THBaseService_isTableAvailableWithSplit_result&);
  THBaseService_isTableAvailableWithSplit_result& operator=(const THBaseService_isTableAvailableWithSplit_result&);
  THBaseService_isTableAvailableWithSplit_result() : success(0) {
  }

  virtual ~THBaseService_isTableAvailableWithSplit_result() throw();
  bool success;
  TIOError io;

  _THBaseService_isTableAvailableWithSplit_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_isTableAvailableWithSplit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_isTableAvailableWithSplit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_isTableAvailableWithSplit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableAvailableWithSplit_result& obj);
};

typedef struct _THBaseService_isTableAvailableWithSplit_presult__isset {
  _THBaseService_isTableAvailableWithSplit_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_isTableAvailableWithSplit_presult__isset;

class THBaseService_isTableAvailableWithSplit_presult {
 public:

  static const char* ascii_fingerprint; // = "4B02E71ED6A864BD28B12BD6134D4CA1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x02,0xE7,0x1E,0xD6,0xA8,0x64,0xBD,0x28,0xB1,0x2B,0xD6,0x13,0x4D,0x4C,0xA1};


  virtual ~THBaseService_isTableAvailableWithSplit_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_isTableAvailableWithSplit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_isTableAvailableWithSplit_presult& obj);
};


class THBaseService_addColumnFamily_args {
 public:

  static const char* ascii_fingerprint; // = "B4E1243CD2AE30B180D674E33063C23B";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0xE1,0x24,0x3C,0xD2,0xAE,0x30,0xB1,0x80,0xD6,0x74,0xE3,0x30,0x63,0xC2,0x3B};

  THBaseService_addColumnFamily_args(const THBaseService_addColumnFamily_args&);
  THBaseService_addColumnFamily_args& operator=(const THBaseService_addColumnFamily_args&);
  THBaseService_addColumnFamily_args() {
  }

  virtual ~THBaseService_addColumnFamily_args() throw();
  TTableName tableName;
  TColumnFamilyDescriptor column;

  void __set_tableName(const TTableName& val);

  void __set_column(const TColumnFamilyDescriptor& val);

  bool operator == (const THBaseService_addColumnFamily_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(column == rhs.column))
      return false;
    return true;
  }
  bool operator != (const THBaseService_addColumnFamily_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_addColumnFamily_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_addColumnFamily_args& obj);
};


class THBaseService_addColumnFamily_pargs {
 public:

  static const char* ascii_fingerprint; // = "B4E1243CD2AE30B180D674E33063C23B";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0xE1,0x24,0x3C,0xD2,0xAE,0x30,0xB1,0x80,0xD6,0x74,0xE3,0x30,0x63,0xC2,0x3B};


  virtual ~THBaseService_addColumnFamily_pargs() throw();
  const TTableName* tableName;
  const TColumnFamilyDescriptor* column;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_addColumnFamily_pargs& obj);
};

typedef struct _THBaseService_addColumnFamily_result__isset {
  _THBaseService_addColumnFamily_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_addColumnFamily_result__isset;

class THBaseService_addColumnFamily_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_addColumnFamily_result(const THBaseService_addColumnFamily_result&);
  THBaseService_addColumnFamily_result& operator=(const THBaseService_addColumnFamily_result&);
  THBaseService_addColumnFamily_result() {
  }

  virtual ~THBaseService_addColumnFamily_result() throw();
  TIOError io;

  _THBaseService_addColumnFamily_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_addColumnFamily_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_addColumnFamily_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_addColumnFamily_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_addColumnFamily_result& obj);
};

typedef struct _THBaseService_addColumnFamily_presult__isset {
  _THBaseService_addColumnFamily_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_addColumnFamily_presult__isset;

class THBaseService_addColumnFamily_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_addColumnFamily_presult() throw();
  TIOError io;

  _THBaseService_addColumnFamily_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_addColumnFamily_presult& obj);
};


class THBaseService_deleteColumnFamily_args {
 public:

  static const char* ascii_fingerprint; // = "582D6E7B5ED915B15EAE9A24716A316D";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x2D,0x6E,0x7B,0x5E,0xD9,0x15,0xB1,0x5E,0xAE,0x9A,0x24,0x71,0x6A,0x31,0x6D};

  THBaseService_deleteColumnFamily_args(const THBaseService_deleteColumnFamily_args&);
  THBaseService_deleteColumnFamily_args& operator=(const THBaseService_deleteColumnFamily_args&);
  THBaseService_deleteColumnFamily_args() : column() {
  }

  virtual ~THBaseService_deleteColumnFamily_args() throw();
  TTableName tableName;
  std::string column;

  void __set_tableName(const TTableName& val);

  void __set_column(const std::string& val);

  bool operator == (const THBaseService_deleteColumnFamily_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(column == rhs.column))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteColumnFamily_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteColumnFamily_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteColumnFamily_args& obj);
};


class THBaseService_deleteColumnFamily_pargs {
 public:

  static const char* ascii_fingerprint; // = "582D6E7B5ED915B15EAE9A24716A316D";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x2D,0x6E,0x7B,0x5E,0xD9,0x15,0xB1,0x5E,0xAE,0x9A,0x24,0x71,0x6A,0x31,0x6D};


  virtual ~THBaseService_deleteColumnFamily_pargs() throw();
  const TTableName* tableName;
  const std::string* column;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteColumnFamily_pargs& obj);
};

typedef struct _THBaseService_deleteColumnFamily_result__isset {
  _THBaseService_deleteColumnFamily_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteColumnFamily_result__isset;

class THBaseService_deleteColumnFamily_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_deleteColumnFamily_result(const THBaseService_deleteColumnFamily_result&);
  THBaseService_deleteColumnFamily_result& operator=(const THBaseService_deleteColumnFamily_result&);
  THBaseService_deleteColumnFamily_result() {
  }

  virtual ~THBaseService_deleteColumnFamily_result() throw();
  TIOError io;

  _THBaseService_deleteColumnFamily_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_deleteColumnFamily_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteColumnFamily_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteColumnFamily_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteColumnFamily_result& obj);
};

typedef struct _THBaseService_deleteColumnFamily_presult__isset {
  _THBaseService_deleteColumnFamily_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteColumnFamily_presult__isset;

class THBaseService_deleteColumnFamily_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_deleteColumnFamily_presult() throw();
  TIOError io;

  _THBaseService_deleteColumnFamily_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteColumnFamily_presult& obj);
};


class THBaseService_modifyColumnFamily_args {
 public:

  static const char* ascii_fingerprint; // = "B4E1243CD2AE30B180D674E33063C23B";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0xE1,0x24,0x3C,0xD2,0xAE,0x30,0xB1,0x80,0xD6,0x74,0xE3,0x30,0x63,0xC2,0x3B};

  THBaseService_modifyColumnFamily_args(const THBaseService_modifyColumnFamily_args&);
  THBaseService_modifyColumnFamily_args& operator=(const THBaseService_modifyColumnFamily_args&);
  THBaseService_modifyColumnFamily_args() {
  }

  virtual ~THBaseService_modifyColumnFamily_args() throw();
  TTableName tableName;
  TColumnFamilyDescriptor column;

  void __set_tableName(const TTableName& val);

  void __set_column(const TColumnFamilyDescriptor& val);

  bool operator == (const THBaseService_modifyColumnFamily_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(column == rhs.column))
      return false;
    return true;
  }
  bool operator != (const THBaseService_modifyColumnFamily_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_modifyColumnFamily_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyColumnFamily_args& obj);
};


class THBaseService_modifyColumnFamily_pargs {
 public:

  static const char* ascii_fingerprint; // = "B4E1243CD2AE30B180D674E33063C23B";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0xE1,0x24,0x3C,0xD2,0xAE,0x30,0xB1,0x80,0xD6,0x74,0xE3,0x30,0x63,0xC2,0x3B};


  virtual ~THBaseService_modifyColumnFamily_pargs() throw();
  const TTableName* tableName;
  const TColumnFamilyDescriptor* column;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyColumnFamily_pargs& obj);
};

typedef struct _THBaseService_modifyColumnFamily_result__isset {
  _THBaseService_modifyColumnFamily_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_modifyColumnFamily_result__isset;

class THBaseService_modifyColumnFamily_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_modifyColumnFamily_result(const THBaseService_modifyColumnFamily_result&);
  THBaseService_modifyColumnFamily_result& operator=(const THBaseService_modifyColumnFamily_result&);
  THBaseService_modifyColumnFamily_result() {
  }

  virtual ~THBaseService_modifyColumnFamily_result() throw();
  TIOError io;

  _THBaseService_modifyColumnFamily_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_modifyColumnFamily_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_modifyColumnFamily_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_modifyColumnFamily_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyColumnFamily_result& obj);
};

typedef struct _THBaseService_modifyColumnFamily_presult__isset {
  _THBaseService_modifyColumnFamily_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_modifyColumnFamily_presult__isset;

class THBaseService_modifyColumnFamily_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_modifyColumnFamily_presult() throw();
  TIOError io;

  _THBaseService_modifyColumnFamily_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyColumnFamily_presult& obj);
};


class THBaseService_modifyTable_args {
 public:

  static const char* ascii_fingerprint; // = "50F4FA7FE93380F21F5F11DEAE3B8749";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0xF4,0xFA,0x7F,0xE9,0x33,0x80,0xF2,0x1F,0x5F,0x11,0xDE,0xAE,0x3B,0x87,0x49};

  THBaseService_modifyTable_args(const THBaseService_modifyTable_args&);
  THBaseService_modifyTable_args& operator=(const THBaseService_modifyTable_args&);
  THBaseService_modifyTable_args() {
  }

  virtual ~THBaseService_modifyTable_args() throw();
  TTableDescriptor desc;

  void __set_desc(const TTableDescriptor& val);

  bool operator == (const THBaseService_modifyTable_args & rhs) const
  {
    if (!(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const THBaseService_modifyTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_modifyTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyTable_args& obj);
};


class THBaseService_modifyTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "50F4FA7FE93380F21F5F11DEAE3B8749";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0xF4,0xFA,0x7F,0xE9,0x33,0x80,0xF2,0x1F,0x5F,0x11,0xDE,0xAE,0x3B,0x87,0x49};


  virtual ~THBaseService_modifyTable_pargs() throw();
  const TTableDescriptor* desc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyTable_pargs& obj);
};

typedef struct _THBaseService_modifyTable_result__isset {
  _THBaseService_modifyTable_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_modifyTable_result__isset;

class THBaseService_modifyTable_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_modifyTable_result(const THBaseService_modifyTable_result&);
  THBaseService_modifyTable_result& operator=(const THBaseService_modifyTable_result&);
  THBaseService_modifyTable_result() {
  }

  virtual ~THBaseService_modifyTable_result() throw();
  TIOError io;

  _THBaseService_modifyTable_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_modifyTable_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_modifyTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_modifyTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyTable_result& obj);
};

typedef struct _THBaseService_modifyTable_presult__isset {
  _THBaseService_modifyTable_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_modifyTable_presult__isset;

class THBaseService_modifyTable_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_modifyTable_presult() throw();
  TIOError io;

  _THBaseService_modifyTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyTable_presult& obj);
};


class THBaseService_createNamespace_args {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};

  THBaseService_createNamespace_args(const THBaseService_createNamespace_args&);
  THBaseService_createNamespace_args& operator=(const THBaseService_createNamespace_args&);
  THBaseService_createNamespace_args() {
  }

  virtual ~THBaseService_createNamespace_args() throw();
  TNamespaceDescriptor namespaceDesc;

  void __set_namespaceDesc(const TNamespaceDescriptor& val);

  bool operator == (const THBaseService_createNamespace_args & rhs) const
  {
    if (!(namespaceDesc == rhs.namespaceDesc))
      return false;
    return true;
  }
  bool operator != (const THBaseService_createNamespace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_createNamespace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_createNamespace_args& obj);
};


class THBaseService_createNamespace_pargs {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};


  virtual ~THBaseService_createNamespace_pargs() throw();
  const TNamespaceDescriptor* namespaceDesc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_createNamespace_pargs& obj);
};

typedef struct _THBaseService_createNamespace_result__isset {
  _THBaseService_createNamespace_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_createNamespace_result__isset;

class THBaseService_createNamespace_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_createNamespace_result(const THBaseService_createNamespace_result&);
  THBaseService_createNamespace_result& operator=(const THBaseService_createNamespace_result&);
  THBaseService_createNamespace_result() {
  }

  virtual ~THBaseService_createNamespace_result() throw();
  TIOError io;

  _THBaseService_createNamespace_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_createNamespace_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_createNamespace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_createNamespace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_createNamespace_result& obj);
};

typedef struct _THBaseService_createNamespace_presult__isset {
  _THBaseService_createNamespace_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_createNamespace_presult__isset;

class THBaseService_createNamespace_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_createNamespace_presult() throw();
  TIOError io;

  _THBaseService_createNamespace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_createNamespace_presult& obj);
};


class THBaseService_modifyNamespace_args {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};

  THBaseService_modifyNamespace_args(const THBaseService_modifyNamespace_args&);
  THBaseService_modifyNamespace_args& operator=(const THBaseService_modifyNamespace_args&);
  THBaseService_modifyNamespace_args() {
  }

  virtual ~THBaseService_modifyNamespace_args() throw();
  TNamespaceDescriptor namespaceDesc;

  void __set_namespaceDesc(const TNamespaceDescriptor& val);

  bool operator == (const THBaseService_modifyNamespace_args & rhs) const
  {
    if (!(namespaceDesc == rhs.namespaceDesc))
      return false;
    return true;
  }
  bool operator != (const THBaseService_modifyNamespace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_modifyNamespace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyNamespace_args& obj);
};


class THBaseService_modifyNamespace_pargs {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};


  virtual ~THBaseService_modifyNamespace_pargs() throw();
  const TNamespaceDescriptor* namespaceDesc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyNamespace_pargs& obj);
};

typedef struct _THBaseService_modifyNamespace_result__isset {
  _THBaseService_modifyNamespace_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_modifyNamespace_result__isset;

class THBaseService_modifyNamespace_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_modifyNamespace_result(const THBaseService_modifyNamespace_result&);
  THBaseService_modifyNamespace_result& operator=(const THBaseService_modifyNamespace_result&);
  THBaseService_modifyNamespace_result() {
  }

  virtual ~THBaseService_modifyNamespace_result() throw();
  TIOError io;

  _THBaseService_modifyNamespace_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_modifyNamespace_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_modifyNamespace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_modifyNamespace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyNamespace_result& obj);
};

typedef struct _THBaseService_modifyNamespace_presult__isset {
  _THBaseService_modifyNamespace_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_modifyNamespace_presult__isset;

class THBaseService_modifyNamespace_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_modifyNamespace_presult() throw();
  TIOError io;

  _THBaseService_modifyNamespace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_modifyNamespace_presult& obj);
};


class THBaseService_deleteNamespace_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  THBaseService_deleteNamespace_args(const THBaseService_deleteNamespace_args&);
  THBaseService_deleteNamespace_args& operator=(const THBaseService_deleteNamespace_args&);
  THBaseService_deleteNamespace_args() : name() {
  }

  virtual ~THBaseService_deleteNamespace_args() throw();
  std::string name;

  void __set_name(const std::string& val);

  bool operator == (const THBaseService_deleteNamespace_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteNamespace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteNamespace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteNamespace_args& obj);
};


class THBaseService_deleteNamespace_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~THBaseService_deleteNamespace_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteNamespace_pargs& obj);
};

typedef struct _THBaseService_deleteNamespace_result__isset {
  _THBaseService_deleteNamespace_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteNamespace_result__isset;

class THBaseService_deleteNamespace_result {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};

  THBaseService_deleteNamespace_result(const THBaseService_deleteNamespace_result&);
  THBaseService_deleteNamespace_result& operator=(const THBaseService_deleteNamespace_result&);
  THBaseService_deleteNamespace_result() {
  }

  virtual ~THBaseService_deleteNamespace_result() throw();
  TIOError io;

  _THBaseService_deleteNamespace_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_deleteNamespace_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteNamespace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteNamespace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteNamespace_result& obj);
};

typedef struct _THBaseService_deleteNamespace_presult__isset {
  _THBaseService_deleteNamespace_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteNamespace_presult__isset;

class THBaseService_deleteNamespace_presult {
 public:

  static const char* ascii_fingerprint; // = "A64C6926B095FDF7C093102D22353EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x4C,0x69,0x26,0xB0,0x95,0xFD,0xF7,0xC0,0x93,0x10,0x2D,0x22,0x35,0x3E,0xDA};


  virtual ~THBaseService_deleteNamespace_presult() throw();
  TIOError io;

  _THBaseService_deleteNamespace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_deleteNamespace_presult& obj);
};


class THBaseService_getNamespaceDescriptor_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  THBaseService_getNamespaceDescriptor_args(const THBaseService_getNamespaceDescriptor_args&);
  THBaseService_getNamespaceDescriptor_args& operator=(const THBaseService_getNamespaceDescriptor_args&);
  THBaseService_getNamespaceDescriptor_args() : name() {
  }

  virtual ~THBaseService_getNamespaceDescriptor_args() throw();
  std::string name;

  void __set_name(const std::string& val);

  bool operator == (const THBaseService_getNamespaceDescriptor_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getNamespaceDescriptor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getNamespaceDescriptor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getNamespaceDescriptor_args& obj);
};


class THBaseService_getNamespaceDescriptor_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~THBaseService_getNamespaceDescriptor_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getNamespaceDescriptor_pargs& obj);
};

typedef struct _THBaseService_getNamespaceDescriptor_result__isset {
  _THBaseService_getNamespaceDescriptor_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getNamespaceDescriptor_result__isset;

class THBaseService_getNamespaceDescriptor_result {
 public:

  static const char* ascii_fingerprint; // = "143D85AA248AF56D1D1B089BAE8CB7BE";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x3D,0x85,0xAA,0x24,0x8A,0xF5,0x6D,0x1D,0x1B,0x08,0x9B,0xAE,0x8C,0xB7,0xBE};

  THBaseService_getNamespaceDescriptor_result(const THBaseService_getNamespaceDescriptor_result&);
  THBaseService_getNamespaceDescriptor_result& operator=(const THBaseService_getNamespaceDescriptor_result&);
  THBaseService_getNamespaceDescriptor_result() {
  }

  virtual ~THBaseService_getNamespaceDescriptor_result() throw();
  TNamespaceDescriptor success;
  TIOError io;

  _THBaseService_getNamespaceDescriptor_result__isset __isset;

  void __set_success(const TNamespaceDescriptor& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getNamespaceDescriptor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getNamespaceDescriptor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getNamespaceDescriptor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getNamespaceDescriptor_result& obj);
};

typedef struct _THBaseService_getNamespaceDescriptor_presult__isset {
  _THBaseService_getNamespaceDescriptor_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getNamespaceDescriptor_presult__isset;

class THBaseService_getNamespaceDescriptor_presult {
 public:

  static const char* ascii_fingerprint; // = "143D85AA248AF56D1D1B089BAE8CB7BE";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x3D,0x85,0xAA,0x24,0x8A,0xF5,0x6D,0x1D,0x1B,0x08,0x9B,0xAE,0x8C,0xB7,0xBE};


  virtual ~THBaseService_getNamespaceDescriptor_presult() throw();
  TNamespaceDescriptor* success;
  TIOError io;

  _THBaseService_getNamespaceDescriptor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getNamespaceDescriptor_presult& obj);
};


class THBaseService_listNamespaceDescriptors_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  THBaseService_listNamespaceDescriptors_args(const THBaseService_listNamespaceDescriptors_args&);
  THBaseService_listNamespaceDescriptors_args& operator=(const THBaseService_listNamespaceDescriptors_args&);
  THBaseService_listNamespaceDescriptors_args() {
  }

  virtual ~THBaseService_listNamespaceDescriptors_args() throw();

  bool operator == (const THBaseService_listNamespaceDescriptors_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const THBaseService_listNamespaceDescriptors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_listNamespaceDescriptors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_listNamespaceDescriptors_args& obj);
};


class THBaseService_listNamespaceDescriptors_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~THBaseService_listNamespaceDescriptors_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_listNamespaceDescriptors_pargs& obj);
};

typedef struct _THBaseService_listNamespaceDescriptors_result__isset {
  _THBaseService_listNamespaceDescriptors_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_listNamespaceDescriptors_result__isset;

class THBaseService_listNamespaceDescriptors_result {
 public:

  static const char* ascii_fingerprint; // = "22BC3BB8C456629A7021E9E52DDDED39";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0xBC,0x3B,0xB8,0xC4,0x56,0x62,0x9A,0x70,0x21,0xE9,0xE5,0x2D,0xDD,0xED,0x39};

  THBaseService_listNamespaceDescriptors_result(const THBaseService_listNamespaceDescriptors_result&);
  THBaseService_listNamespaceDescriptors_result& operator=(const THBaseService_listNamespaceDescriptors_result&);
  THBaseService_listNamespaceDescriptors_result() {
  }

  virtual ~THBaseService_listNamespaceDescriptors_result() throw();
  std::vector<TNamespaceDescriptor>  success;
  TIOError io;

  _THBaseService_listNamespaceDescriptors_result__isset __isset;

  void __set_success(const std::vector<TNamespaceDescriptor> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_listNamespaceDescriptors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_listNamespaceDescriptors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_listNamespaceDescriptors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_listNamespaceDescriptors_result& obj);
};

typedef struct _THBaseService_listNamespaceDescriptors_presult__isset {
  _THBaseService_listNamespaceDescriptors_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_listNamespaceDescriptors_presult__isset;

class THBaseService_listNamespaceDescriptors_presult {
 public:

  static const char* ascii_fingerprint; // = "22BC3BB8C456629A7021E9E52DDDED39";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0xBC,0x3B,0xB8,0xC4,0x56,0x62,0x9A,0x70,0x21,0xE9,0xE5,0x2D,0xDD,0xED,0x39};


  virtual ~THBaseService_listNamespaceDescriptors_presult() throw();
  std::vector<TNamespaceDescriptor> * success;
  TIOError io;

  _THBaseService_listNamespaceDescriptors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_listNamespaceDescriptors_presult& obj);
};


class THBaseService_listNamespaces_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  THBaseService_listNamespaces_args(const THBaseService_listNamespaces_args&);
  THBaseService_listNamespaces_args& operator=(const THBaseService_listNamespaces_args&);
  THBaseService_listNamespaces_args() {
  }

  virtual ~THBaseService_listNamespaces_args() throw();

  bool operator == (const THBaseService_listNamespaces_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const THBaseService_listNamespaces_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_listNamespaces_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_listNamespaces_args& obj);
};


class THBaseService_listNamespaces_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~THBaseService_listNamespaces_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_listNamespaces_pargs& obj);
};

typedef struct _THBaseService_listNamespaces_result__isset {
  _THBaseService_listNamespaces_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_listNamespaces_result__isset;

class THBaseService_listNamespaces_result {
 public:

  static const char* ascii_fingerprint; // = "DF5AF47EEAE49FF3AF817D27BB8CB4F7";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x5A,0xF4,0x7E,0xEA,0xE4,0x9F,0xF3,0xAF,0x81,0x7D,0x27,0xBB,0x8C,0xB4,0xF7};

  THBaseService_listNamespaces_result(const THBaseService_listNamespaces_result&);
  THBaseService_listNamespaces_result& operator=(const THBaseService_listNamespaces_result&);
  THBaseService_listNamespaces_result() {
  }

  virtual ~THBaseService_listNamespaces_result() throw();
  std::vector<std::string>  success;
  TIOError io;

  _THBaseService_listNamespaces_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_listNamespaces_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_listNamespaces_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_listNamespaces_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_listNamespaces_result& obj);
};

typedef struct _THBaseService_listNamespaces_presult__isset {
  _THBaseService_listNamespaces_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_listNamespaces_presult__isset;

class THBaseService_listNamespaces_presult {
 public:

  static const char* ascii_fingerprint; // = "DF5AF47EEAE49FF3AF817D27BB8CB4F7";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x5A,0xF4,0x7E,0xEA,0xE4,0x9F,0xF3,0xAF,0x81,0x7D,0x27,0xBB,0x8C,0xB4,0xF7};


  virtual ~THBaseService_listNamespaces_presult() throw();
  std::vector<std::string> * success;
  TIOError io;

  _THBaseService_listNamespaces_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_listNamespaces_presult& obj);
};


class THBaseService_getThriftServerType_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  THBaseService_getThriftServerType_args(const THBaseService_getThriftServerType_args&);
  THBaseService_getThriftServerType_args& operator=(const THBaseService_getThriftServerType_args&);
  THBaseService_getThriftServerType_args() {
  }

  virtual ~THBaseService_getThriftServerType_args() throw();

  bool operator == (const THBaseService_getThriftServerType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const THBaseService_getThriftServerType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getThriftServerType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getThriftServerType_args& obj);
};


class THBaseService_getThriftServerType_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~THBaseService_getThriftServerType_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getThriftServerType_pargs& obj);
};

typedef struct _THBaseService_getThriftServerType_result__isset {
  _THBaseService_getThriftServerType_result__isset() : success(false) {}
  bool success :1;
} _THBaseService_getThriftServerType_result__isset;

class THBaseService_getThriftServerType_result {
 public:

  static const char* ascii_fingerprint; // = "F1BC2174724B9D2E335CD95F6D6F9367";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xBC,0x21,0x74,0x72,0x4B,0x9D,0x2E,0x33,0x5C,0xD9,0x5F,0x6D,0x6F,0x93,0x67};

  THBaseService_getThriftServerType_result(const THBaseService_getThriftServerType_result&);
  THBaseService_getThriftServerType_result& operator=(const THBaseService_getThriftServerType_result&);
  THBaseService_getThriftServerType_result() : success((TThriftServerType::type)0) {
  }

  virtual ~THBaseService_getThriftServerType_result() throw();
  TThriftServerType::type success;

  _THBaseService_getThriftServerType_result__isset __isset;

  void __set_success(const TThriftServerType::type val);

  bool operator == (const THBaseService_getThriftServerType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getThriftServerType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getThriftServerType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getThriftServerType_result& obj);
};

typedef struct _THBaseService_getThriftServerType_presult__isset {
  _THBaseService_getThriftServerType_presult__isset() : success(false) {}
  bool success :1;
} _THBaseService_getThriftServerType_presult__isset;

class THBaseService_getThriftServerType_presult {
 public:

  static const char* ascii_fingerprint; // = "F1BC2174724B9D2E335CD95F6D6F9367";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xBC,0x21,0x74,0x72,0x4B,0x9D,0x2E,0x33,0x5C,0xD9,0x5F,0x6D,0x6F,0x93,0x67};


  virtual ~THBaseService_getThriftServerType_presult() throw();
  TThriftServerType::type* success;

  _THBaseService_getThriftServerType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getThriftServerType_presult& obj);
};

typedef struct _THBaseService_getSlowLogResponses_args__isset {
  _THBaseService_getSlowLogResponses_args__isset() : serverNames(false), logQueryFilter(false) {}
  bool serverNames :1;
  bool logQueryFilter :1;
} _THBaseService_getSlowLogResponses_args__isset;

class THBaseService_getSlowLogResponses_args {
 public:

  static const char* ascii_fingerprint; // = "CB52A70E301A9CE64DB3311FE02158FF";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x52,0xA7,0x0E,0x30,0x1A,0x9C,0xE6,0x4D,0xB3,0x31,0x1F,0xE0,0x21,0x58,0xFF};

  THBaseService_getSlowLogResponses_args(const THBaseService_getSlowLogResponses_args&);
  THBaseService_getSlowLogResponses_args& operator=(const THBaseService_getSlowLogResponses_args&);
  THBaseService_getSlowLogResponses_args() {
  }

  virtual ~THBaseService_getSlowLogResponses_args() throw();
  std::set<TServerName>  serverNames;
  TLogQueryFilter logQueryFilter;

  _THBaseService_getSlowLogResponses_args__isset __isset;

  void __set_serverNames(const std::set<TServerName> & val);

  void __set_logQueryFilter(const TLogQueryFilter& val);

  bool operator == (const THBaseService_getSlowLogResponses_args & rhs) const
  {
    if (!(serverNames == rhs.serverNames))
      return false;
    if (!(logQueryFilter == rhs.logQueryFilter))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getSlowLogResponses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getSlowLogResponses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getSlowLogResponses_args& obj);
};


class THBaseService_getSlowLogResponses_pargs {
 public:

  static const char* ascii_fingerprint; // = "CB52A70E301A9CE64DB3311FE02158FF";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x52,0xA7,0x0E,0x30,0x1A,0x9C,0xE6,0x4D,0xB3,0x31,0x1F,0xE0,0x21,0x58,0xFF};


  virtual ~THBaseService_getSlowLogResponses_pargs() throw();
  const std::set<TServerName> * serverNames;
  const TLogQueryFilter* logQueryFilter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getSlowLogResponses_pargs& obj);
};

typedef struct _THBaseService_getSlowLogResponses_result__isset {
  _THBaseService_getSlowLogResponses_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getSlowLogResponses_result__isset;

class THBaseService_getSlowLogResponses_result {
 public:

  static const char* ascii_fingerprint; // = "DC06B6B59D136A40E9AB406D4A7B11E5";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x06,0xB6,0xB5,0x9D,0x13,0x6A,0x40,0xE9,0xAB,0x40,0x6D,0x4A,0x7B,0x11,0xE5};

  THBaseService_getSlowLogResponses_result(const THBaseService_getSlowLogResponses_result&);
  THBaseService_getSlowLogResponses_result& operator=(const THBaseService_getSlowLogResponses_result&);
  THBaseService_getSlowLogResponses_result() {
  }

  virtual ~THBaseService_getSlowLogResponses_result() throw();
  std::vector<TOnlineLogRecord>  success;
  TIOError io;

  _THBaseService_getSlowLogResponses_result__isset __isset;

  void __set_success(const std::vector<TOnlineLogRecord> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getSlowLogResponses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getSlowLogResponses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getSlowLogResponses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getSlowLogResponses_result& obj);
};

typedef struct _THBaseService_getSlowLogResponses_presult__isset {
  _THBaseService_getSlowLogResponses_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getSlowLogResponses_presult__isset;

class THBaseService_getSlowLogResponses_presult {
 public:

  static const char* ascii_fingerprint; // = "DC06B6B59D136A40E9AB406D4A7B11E5";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x06,0xB6,0xB5,0x9D,0x13,0x6A,0x40,0xE9,0xAB,0x40,0x6D,0x4A,0x7B,0x11,0xE5};


  virtual ~THBaseService_getSlowLogResponses_presult() throw();
  std::vector<TOnlineLogRecord> * success;
  TIOError io;

  _THBaseService_getSlowLogResponses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getSlowLogResponses_presult& obj);
};

typedef struct _THBaseService_clearSlowLogResponses_args__isset {
  _THBaseService_clearSlowLogResponses_args__isset() : serverNames(false) {}
  bool serverNames :1;
} _THBaseService_clearSlowLogResponses_args__isset;

class THBaseService_clearSlowLogResponses_args {
 public:

  static const char* ascii_fingerprint; // = "FAAB5F7EE221E519C51CD3B34E1B2EB1";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0xAB,0x5F,0x7E,0xE2,0x21,0xE5,0x19,0xC5,0x1C,0xD3,0xB3,0x4E,0x1B,0x2E,0xB1};

  THBaseService_clearSlowLogResponses_args(const THBaseService_clearSlowLogResponses_args&);
  THBaseService_clearSlowLogResponses_args& operator=(const THBaseService_clearSlowLogResponses_args&);
  THBaseService_clearSlowLogResponses_args() {
  }

  virtual ~THBaseService_clearSlowLogResponses_args() throw();
  std::set<TServerName>  serverNames;

  _THBaseService_clearSlowLogResponses_args__isset __isset;

  void __set_serverNames(const std::set<TServerName> & val);

  bool operator == (const THBaseService_clearSlowLogResponses_args & rhs) const
  {
    if (!(serverNames == rhs.serverNames))
      return false;
    return true;
  }
  bool operator != (const THBaseService_clearSlowLogResponses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_clearSlowLogResponses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_clearSlowLogResponses_args& obj);
};


class THBaseService_clearSlowLogResponses_pargs {
 public:

  static const char* ascii_fingerprint; // = "FAAB5F7EE221E519C51CD3B34E1B2EB1";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0xAB,0x5F,0x7E,0xE2,0x21,0xE5,0x19,0xC5,0x1C,0xD3,0xB3,0x4E,0x1B,0x2E,0xB1};


  virtual ~THBaseService_clearSlowLogResponses_pargs() throw();
  const std::set<TServerName> * serverNames;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_clearSlowLogResponses_pargs& obj);
};

typedef struct _THBaseService_clearSlowLogResponses_result__isset {
  _THBaseService_clearSlowLogResponses_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_clearSlowLogResponses_result__isset;

class THBaseService_clearSlowLogResponses_result {
 public:

  static const char* ascii_fingerprint; // = "006576CE101E1259697781088D23D6DE";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x65,0x76,0xCE,0x10,0x1E,0x12,0x59,0x69,0x77,0x81,0x08,0x8D,0x23,0xD6,0xDE};

  THBaseService_clearSlowLogResponses_result(const THBaseService_clearSlowLogResponses_result&);
  THBaseService_clearSlowLogResponses_result& operator=(const THBaseService_clearSlowLogResponses_result&);
  THBaseService_clearSlowLogResponses_result() {
  }

  virtual ~THBaseService_clearSlowLogResponses_result() throw();
  std::vector<bool>  success;
  TIOError io;

  _THBaseService_clearSlowLogResponses_result__isset __isset;

  void __set_success(const std::vector<bool> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_clearSlowLogResponses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_clearSlowLogResponses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_clearSlowLogResponses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_clearSlowLogResponses_result& obj);
};

typedef struct _THBaseService_clearSlowLogResponses_presult__isset {
  _THBaseService_clearSlowLogResponses_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_clearSlowLogResponses_presult__isset;

class THBaseService_clearSlowLogResponses_presult {
 public:

  static const char* ascii_fingerprint; // = "006576CE101E1259697781088D23D6DE";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x65,0x76,0xCE,0x10,0x1E,0x12,0x59,0x69,0x77,0x81,0x08,0x8D,0x23,0xD6,0xDE};


  virtual ~THBaseService_clearSlowLogResponses_presult() throw();
  std::vector<bool> * success;
  TIOError io;

  _THBaseService_clearSlowLogResponses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_clearSlowLogResponses_presult& obj);
};


class THBaseService_getClusterId_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  THBaseService_getClusterId_args(const THBaseService_getClusterId_args&);
  THBaseService_getClusterId_args& operator=(const THBaseService_getClusterId_args&);
  THBaseService_getClusterId_args() {
  }

  virtual ~THBaseService_getClusterId_args() throw();

  bool operator == (const THBaseService_getClusterId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const THBaseService_getClusterId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getClusterId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getClusterId_args& obj);
};


class THBaseService_getClusterId_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~THBaseService_getClusterId_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getClusterId_pargs& obj);
};

typedef struct _THBaseService_getClusterId_result__isset {
  _THBaseService_getClusterId_result__isset() : success(false) {}
  bool success :1;
} _THBaseService_getClusterId_result__isset;

class THBaseService_getClusterId_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  THBaseService_getClusterId_result(const THBaseService_getClusterId_result&);
  THBaseService_getClusterId_result& operator=(const THBaseService_getClusterId_result&);
  THBaseService_getClusterId_result() : success() {
  }

  virtual ~THBaseService_getClusterId_result() throw();
  std::string success;

  _THBaseService_getClusterId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const THBaseService_getClusterId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getClusterId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getClusterId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getClusterId_result& obj);
};

typedef struct _THBaseService_getClusterId_presult__isset {
  _THBaseService_getClusterId_presult__isset() : success(false) {}
  bool success :1;
} _THBaseService_getClusterId_presult__isset;

class THBaseService_getClusterId_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~THBaseService_getClusterId_presult() throw();
  std::string* success;

  _THBaseService_getClusterId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const THBaseService_getClusterId_presult& obj);
};

class THBaseServiceClient : virtual public THBaseServiceIf {
 public:
  THBaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  THBaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool exists(const std::string& table, const TGet& tget);
  void send_exists(const std::string& table, const TGet& tget);
  bool recv_exists();
  void existsAll(std::vector<bool> & _return, const std::string& table, const std::vector<TGet> & tgets);
  void send_existsAll(const std::string& table, const std::vector<TGet> & tgets);
  void recv_existsAll(std::vector<bool> & _return);
  void get(TResult& _return, const std::string& table, const TGet& tget);
  void send_get(const std::string& table, const TGet& tget);
  void recv_get(TResult& _return);
  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & tgets);
  void send_getMultiple(const std::string& table, const std::vector<TGet> & tgets);
  void recv_getMultiple(std::vector<TResult> & _return);
  void put(const std::string& table, const TPut& tput);
  void send_put(const std::string& table, const TPut& tput);
  void recv_put();
  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput);
  void send_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput);
  bool recv_checkAndPut();
  void putMultiple(const std::string& table, const std::vector<TPut> & tputs);
  void send_putMultiple(const std::string& table, const std::vector<TPut> & tputs);
  void recv_putMultiple();
  void deleteSingle(const std::string& table, const TDelete& tdelete);
  void send_deleteSingle(const std::string& table, const TDelete& tdelete);
  void recv_deleteSingle();
  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & tdeletes);
  void send_deleteMultiple(const std::string& table, const std::vector<TDelete> & tdeletes);
  void recv_deleteMultiple(std::vector<TDelete> & _return);
  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete);
  void send_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete);
  bool recv_checkAndDelete();
  void increment(TResult& _return, const std::string& table, const TIncrement& tincrement);
  void send_increment(const std::string& table, const TIncrement& tincrement);
  void recv_increment(TResult& _return);
  void append(TResult& _return, const std::string& table, const TAppend& tappend);
  void send_append(const std::string& table, const TAppend& tappend);
  void recv_append(TResult& _return);
  int32_t openScanner(const std::string& table, const TScan& tscan);
  void send_openScanner(const std::string& table, const TScan& tscan);
  int32_t recv_openScanner();
  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows);
  void send_getScannerRows(const int32_t scannerId, const int32_t numRows);
  void recv_getScannerRows(std::vector<TResult> & _return);
  void closeScanner(const int32_t scannerId);
  void send_closeScanner(const int32_t scannerId);
  void recv_closeScanner();
  void mutateRow(const std::string& table, const TRowMutations& trowMutations);
  void send_mutateRow(const std::string& table, const TRowMutations& trowMutations);
  void recv_mutateRow();
  void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& tscan, const int32_t numRows);
  void send_getScannerResults(const std::string& table, const TScan& tscan, const int32_t numRows);
  void recv_getScannerResults(std::vector<TResult> & _return);
  void getRegionLocation(THRegionLocation& _return, const std::string& table, const std::string& row, const bool reload);
  void send_getRegionLocation(const std::string& table, const std::string& row, const bool reload);
  void recv_getRegionLocation(THRegionLocation& _return);
  void getAllRegionLocations(std::vector<THRegionLocation> & _return, const std::string& table);
  void send_getAllRegionLocations(const std::string& table);
  void recv_getAllRegionLocations(std::vector<THRegionLocation> & _return);
  bool checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const TCompareOp::type compareOp, const std::string& value, const TRowMutations& rowMutations);
  void send_checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const TCompareOp::type compareOp, const std::string& value, const TRowMutations& rowMutations);
  bool recv_checkAndMutate();
  void getTableDescriptor(TTableDescriptor& _return, const TTableName& table);
  void send_getTableDescriptor(const TTableName& table);
  void recv_getTableDescriptor(TTableDescriptor& _return);
  void getTableDescriptors(std::vector<TTableDescriptor> & _return, const std::vector<TTableName> & tables);
  void send_getTableDescriptors(const std::vector<TTableName> & tables);
  void recv_getTableDescriptors(std::vector<TTableDescriptor> & _return);
  bool tableExists(const TTableName& tableName);
  void send_tableExists(const TTableName& tableName);
  bool recv_tableExists();
  void getTableDescriptorsByPattern(std::vector<TTableDescriptor> & _return, const std::string& regex, const bool includeSysTables);
  void send_getTableDescriptorsByPattern(const std::string& regex, const bool includeSysTables);
  void recv_getTableDescriptorsByPattern(std::vector<TTableDescriptor> & _return);
  void getTableDescriptorsByNamespace(std::vector<TTableDescriptor> & _return, const std::string& name);
  void send_getTableDescriptorsByNamespace(const std::string& name);
  void recv_getTableDescriptorsByNamespace(std::vector<TTableDescriptor> & _return);
  void getTableNamesByPattern(std::vector<TTableName> & _return, const std::string& regex, const bool includeSysTables);
  void send_getTableNamesByPattern(const std::string& regex, const bool includeSysTables);
  void recv_getTableNamesByPattern(std::vector<TTableName> & _return);
  void getTableNamesByNamespace(std::vector<TTableName> & _return, const std::string& name);
  void send_getTableNamesByNamespace(const std::string& name);
  void recv_getTableNamesByNamespace(std::vector<TTableName> & _return);
  void createTable(const TTableDescriptor& desc, const std::vector<std::string> & splitKeys);
  void send_createTable(const TTableDescriptor& desc, const std::vector<std::string> & splitKeys);
  void recv_createTable();
  void deleteTable(const TTableName& tableName);
  void send_deleteTable(const TTableName& tableName);
  void recv_deleteTable();
  void truncateTable(const TTableName& tableName, const bool preserveSplits);
  void send_truncateTable(const TTableName& tableName, const bool preserveSplits);
  void recv_truncateTable();
  void enableTable(const TTableName& tableName);
  void send_enableTable(const TTableName& tableName);
  void recv_enableTable();
  void disableTable(const TTableName& tableName);
  void send_disableTable(const TTableName& tableName);
  void recv_disableTable();
  bool isTableEnabled(const TTableName& tableName);
  void send_isTableEnabled(const TTableName& tableName);
  bool recv_isTableEnabled();
  bool isTableDisabled(const TTableName& tableName);
  void send_isTableDisabled(const TTableName& tableName);
  bool recv_isTableDisabled();
  bool isTableAvailable(const TTableName& tableName);
  void send_isTableAvailable(const TTableName& tableName);
  bool recv_isTableAvailable();
  bool isTableAvailableWithSplit(const TTableName& tableName, const std::vector<std::string> & splitKeys);
  void send_isTableAvailableWithSplit(const TTableName& tableName, const std::vector<std::string> & splitKeys);
  bool recv_isTableAvailableWithSplit();
  void addColumnFamily(const TTableName& tableName, const TColumnFamilyDescriptor& column);
  void send_addColumnFamily(const TTableName& tableName, const TColumnFamilyDescriptor& column);
  void recv_addColumnFamily();
  void deleteColumnFamily(const TTableName& tableName, const std::string& column);
  void send_deleteColumnFamily(const TTableName& tableName, const std::string& column);
  void recv_deleteColumnFamily();
  void modifyColumnFamily(const TTableName& tableName, const TColumnFamilyDescriptor& column);
  void send_modifyColumnFamily(const TTableName& tableName, const TColumnFamilyDescriptor& column);
  void recv_modifyColumnFamily();
  void modifyTable(const TTableDescriptor& desc);
  void send_modifyTable(const TTableDescriptor& desc);
  void recv_modifyTable();
  void createNamespace(const TNamespaceDescriptor& namespaceDesc);
  void send_createNamespace(const TNamespaceDescriptor& namespaceDesc);
  void recv_createNamespace();
  void modifyNamespace(const TNamespaceDescriptor& namespaceDesc);
  void send_modifyNamespace(const TNamespaceDescriptor& namespaceDesc);
  void recv_modifyNamespace();
  void deleteNamespace(const std::string& name);
  void send_deleteNamespace(const std::string& name);
  void recv_deleteNamespace();
  void getNamespaceDescriptor(TNamespaceDescriptor& _return, const std::string& name);
  void send_getNamespaceDescriptor(const std::string& name);
  void recv_getNamespaceDescriptor(TNamespaceDescriptor& _return);
  void listNamespaceDescriptors(std::vector<TNamespaceDescriptor> & _return);
  void send_listNamespaceDescriptors();
  void recv_listNamespaceDescriptors(std::vector<TNamespaceDescriptor> & _return);
  void listNamespaces(std::vector<std::string> & _return);
  void send_listNamespaces();
  void recv_listNamespaces(std::vector<std::string> & _return);
  TThriftServerType::type getThriftServerType();
  void send_getThriftServerType();
  TThriftServerType::type recv_getThriftServerType();
  void getSlowLogResponses(std::vector<TOnlineLogRecord> & _return, const std::set<TServerName> & serverNames, const TLogQueryFilter& logQueryFilter);
  void send_getSlowLogResponses(const std::set<TServerName> & serverNames, const TLogQueryFilter& logQueryFilter);
  void recv_getSlowLogResponses(std::vector<TOnlineLogRecord> & _return);
  void clearSlowLogResponses(std::vector<bool> & _return, const std::set<TServerName> & serverNames);
  void send_clearSlowLogResponses(const std::set<TServerName> & serverNames);
  void recv_clearSlowLogResponses(std::vector<bool> & _return);
  void getClusterId(std::string& _return);
  void send_getClusterId();
  void recv_getClusterId(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class THBaseServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<THBaseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (THBaseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_exists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_existsAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkAndPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSingle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkAndDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_increment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openScanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getScannerRows(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeScanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mutateRow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getScannerResults(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRegionLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllRegionLocations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkAndMutate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableDescriptor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableDescriptors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tableExists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableDescriptorsByPattern(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableDescriptorsByNamespace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableNamesByPattern(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableNamesByNamespace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_truncateTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enableTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disableTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isTableEnabled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isTableDisabled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isTableAvailable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isTableAvailableWithSplit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addColumnFamily(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteColumnFamily(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modifyColumnFamily(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modifyTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createNamespace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modifyNamespace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteNamespace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNamespaceDescriptor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listNamespaceDescriptors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listNamespaces(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getThriftServerType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSlowLogResponses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clearSlowLogResponses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getClusterId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  THBaseServiceProcessor(boost::shared_ptr<THBaseServiceIf> iface) :
    iface_(iface) {
    processMap_["exists"] = &THBaseServiceProcessor::process_exists;
    processMap_["existsAll"] = &THBaseServiceProcessor::process_existsAll;
    processMap_["get"] = &THBaseServiceProcessor::process_get;
    processMap_["getMultiple"] = &THBaseServiceProcessor::process_getMultiple;
    processMap_["put"] = &THBaseServiceProcessor::process_put;
    processMap_["checkAndPut"] = &THBaseServiceProcessor::process_checkAndPut;
    processMap_["putMultiple"] = &THBaseServiceProcessor::process_putMultiple;
    processMap_["deleteSingle"] = &THBaseServiceProcessor::process_deleteSingle;
    processMap_["deleteMultiple"] = &THBaseServiceProcessor::process_deleteMultiple;
    processMap_["checkAndDelete"] = &THBaseServiceProcessor::process_checkAndDelete;
    processMap_["increment"] = &THBaseServiceProcessor::process_increment;
    processMap_["append"] = &THBaseServiceProcessor::process_append;
    processMap_["openScanner"] = &THBaseServiceProcessor::process_openScanner;
    processMap_["getScannerRows"] = &THBaseServiceProcessor::process_getScannerRows;
    processMap_["closeScanner"] = &THBaseServiceProcessor::process_closeScanner;
    processMap_["mutateRow"] = &THBaseServiceProcessor::process_mutateRow;
    processMap_["getScannerResults"] = &THBaseServiceProcessor::process_getScannerResults;
    processMap_["getRegionLocation"] = &THBaseServiceProcessor::process_getRegionLocation;
    processMap_["getAllRegionLocations"] = &THBaseServiceProcessor::process_getAllRegionLocations;
    processMap_["checkAndMutate"] = &THBaseServiceProcessor::process_checkAndMutate;
    processMap_["getTableDescriptor"] = &THBaseServiceProcessor::process_getTableDescriptor;
    processMap_["getTableDescriptors"] = &THBaseServiceProcessor::process_getTableDescriptors;
    processMap_["tableExists"] = &THBaseServiceProcessor::process_tableExists;
    processMap_["getTableDescriptorsByPattern"] = &THBaseServiceProcessor::process_getTableDescriptorsByPattern;
    processMap_["getTableDescriptorsByNamespace"] = &THBaseServiceProcessor::process_getTableDescriptorsByNamespace;
    processMap_["getTableNamesByPattern"] = &THBaseServiceProcessor::process_getTableNamesByPattern;
    processMap_["getTableNamesByNamespace"] = &THBaseServiceProcessor::process_getTableNamesByNamespace;
    processMap_["createTable"] = &THBaseServiceProcessor::process_createTable;
    processMap_["deleteTable"] = &THBaseServiceProcessor::process_deleteTable;
    processMap_["truncateTable"] = &THBaseServiceProcessor::process_truncateTable;
    processMap_["enableTable"] = &THBaseServiceProcessor::process_enableTable;
    processMap_["disableTable"] = &THBaseServiceProcessor::process_disableTable;
    processMap_["isTableEnabled"] = &THBaseServiceProcessor::process_isTableEnabled;
    processMap_["isTableDisabled"] = &THBaseServiceProcessor::process_isTableDisabled;
    processMap_["isTableAvailable"] = &THBaseServiceProcessor::process_isTableAvailable;
    processMap_["isTableAvailableWithSplit"] = &THBaseServiceProcessor::process_isTableAvailableWithSplit;
    processMap_["addColumnFamily"] = &THBaseServiceProcessor::process_addColumnFamily;
    processMap_["deleteColumnFamily"] = &THBaseServiceProcessor::process_deleteColumnFamily;
    processMap_["modifyColumnFamily"] = &THBaseServiceProcessor::process_modifyColumnFamily;
    processMap_["modifyTable"] = &THBaseServiceProcessor::process_modifyTable;
    processMap_["createNamespace"] = &THBaseServiceProcessor::process_createNamespace;
    processMap_["modifyNamespace"] = &THBaseServiceProcessor::process_modifyNamespace;
    processMap_["deleteNamespace"] = &THBaseServiceProcessor::process_deleteNamespace;
    processMap_["getNamespaceDescriptor"] = &THBaseServiceProcessor::process_getNamespaceDescriptor;
    processMap_["listNamespaceDescriptors"] = &THBaseServiceProcessor::process_listNamespaceDescriptors;
    processMap_["listNamespaces"] = &THBaseServiceProcessor::process_listNamespaces;
    processMap_["getThriftServerType"] = &THBaseServiceProcessor::process_getThriftServerType;
    processMap_["getSlowLogResponses"] = &THBaseServiceProcessor::process_getSlowLogResponses;
    processMap_["clearSlowLogResponses"] = &THBaseServiceProcessor::process_clearSlowLogResponses;
    processMap_["getClusterId"] = &THBaseServiceProcessor::process_getClusterId;
  }

  virtual ~THBaseServiceProcessor() {}
};

class THBaseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  THBaseServiceProcessorFactory(const ::boost::shared_ptr< THBaseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< THBaseServiceIfFactory > handlerFactory_;
};

class THBaseServiceMultiface : virtual public THBaseServiceIf {
 public:
  THBaseServiceMultiface(std::vector<boost::shared_ptr<THBaseServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~THBaseServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<THBaseServiceIf> > ifaces_;
  THBaseServiceMultiface() {}
  void add(boost::shared_ptr<THBaseServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool exists(const std::string& table, const TGet& tget) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exists(table, tget);
    }
    return ifaces_[i]->exists(table, tget);
  }

  void existsAll(std::vector<bool> & _return, const std::string& table, const std::vector<TGet> & tgets) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->existsAll(_return, table, tgets);
    }
    ifaces_[i]->existsAll(_return, table, tgets);
    return;
  }

  void get(TResult& _return, const std::string& table, const TGet& tget) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, table, tget);
    }
    ifaces_[i]->get(_return, table, tget);
    return;
  }

  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & tgets) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMultiple(_return, table, tgets);
    }
    ifaces_[i]->getMultiple(_return, table, tgets);
    return;
  }

  void put(const std::string& table, const TPut& tput) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(table, tput);
    }
    ifaces_[i]->put(table, tput);
  }

  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkAndPut(table, row, family, qualifier, value, tput);
    }
    return ifaces_[i]->checkAndPut(table, row, family, qualifier, value, tput);
  }

  void putMultiple(const std::string& table, const std::vector<TPut> & tputs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putMultiple(table, tputs);
    }
    ifaces_[i]->putMultiple(table, tputs);
  }

  void deleteSingle(const std::string& table, const TDelete& tdelete) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSingle(table, tdelete);
    }
    ifaces_[i]->deleteSingle(table, tdelete);
  }

  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & tdeletes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteMultiple(_return, table, tdeletes);
    }
    ifaces_[i]->deleteMultiple(_return, table, tdeletes);
    return;
  }

  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkAndDelete(table, row, family, qualifier, value, tdelete);
    }
    return ifaces_[i]->checkAndDelete(table, row, family, qualifier, value, tdelete);
  }

  void increment(TResult& _return, const std::string& table, const TIncrement& tincrement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->increment(_return, table, tincrement);
    }
    ifaces_[i]->increment(_return, table, tincrement);
    return;
  }

  void append(TResult& _return, const std::string& table, const TAppend& tappend) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append(_return, table, tappend);
    }
    ifaces_[i]->append(_return, table, tappend);
    return;
  }

  int32_t openScanner(const std::string& table, const TScan& tscan) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openScanner(table, tscan);
    }
    return ifaces_[i]->openScanner(table, tscan);
  }

  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getScannerRows(_return, scannerId, numRows);
    }
    ifaces_[i]->getScannerRows(_return, scannerId, numRows);
    return;
  }

  void closeScanner(const int32_t scannerId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeScanner(scannerId);
    }
    ifaces_[i]->closeScanner(scannerId);
  }

  void mutateRow(const std::string& table, const TRowMutations& trowMutations) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mutateRow(table, trowMutations);
    }
    ifaces_[i]->mutateRow(table, trowMutations);
  }

  void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& tscan, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getScannerResults(_return, table, tscan, numRows);
    }
    ifaces_[i]->getScannerResults(_return, table, tscan, numRows);
    return;
  }

  void getRegionLocation(THRegionLocation& _return, const std::string& table, const std::string& row, const bool reload) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRegionLocation(_return, table, row, reload);
    }
    ifaces_[i]->getRegionLocation(_return, table, row, reload);
    return;
  }

  void getAllRegionLocations(std::vector<THRegionLocation> & _return, const std::string& table) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllRegionLocations(_return, table);
    }
    ifaces_[i]->getAllRegionLocations(_return, table);
    return;
  }

  bool checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const TCompareOp::type compareOp, const std::string& value, const TRowMutations& rowMutations) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkAndMutate(table, row, family, qualifier, compareOp, value, rowMutations);
    }
    return ifaces_[i]->checkAndMutate(table, row, family, qualifier, compareOp, value, rowMutations);
  }

  void getTableDescriptor(TTableDescriptor& _return, const TTableName& table) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableDescriptor(_return, table);
    }
    ifaces_[i]->getTableDescriptor(_return, table);
    return;
  }

  void getTableDescriptors(std::vector<TTableDescriptor> & _return, const std::vector<TTableName> & tables) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableDescriptors(_return, tables);
    }
    ifaces_[i]->getTableDescriptors(_return, tables);
    return;
  }

  bool tableExists(const TTableName& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tableExists(tableName);
    }
    return ifaces_[i]->tableExists(tableName);
  }

  void getTableDescriptorsByPattern(std::vector<TTableDescriptor> & _return, const std::string& regex, const bool includeSysTables) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableDescriptorsByPattern(_return, regex, includeSysTables);
    }
    ifaces_[i]->getTableDescriptorsByPattern(_return, regex, includeSysTables);
    return;
  }

  void getTableDescriptorsByNamespace(std::vector<TTableDescriptor> & _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableDescriptorsByNamespace(_return, name);
    }
    ifaces_[i]->getTableDescriptorsByNamespace(_return, name);
    return;
  }

  void getTableNamesByPattern(std::vector<TTableName> & _return, const std::string& regex, const bool includeSysTables) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableNamesByPattern(_return, regex, includeSysTables);
    }
    ifaces_[i]->getTableNamesByPattern(_return, regex, includeSysTables);
    return;
  }

  void getTableNamesByNamespace(std::vector<TTableName> & _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableNamesByNamespace(_return, name);
    }
    ifaces_[i]->getTableNamesByNamespace(_return, name);
    return;
  }

  void createTable(const TTableDescriptor& desc, const std::vector<std::string> & splitKeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createTable(desc, splitKeys);
    }
    ifaces_[i]->createTable(desc, splitKeys);
  }

  void deleteTable(const TTableName& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteTable(tableName);
    }
    ifaces_[i]->deleteTable(tableName);
  }

  void truncateTable(const TTableName& tableName, const bool preserveSplits) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->truncateTable(tableName, preserveSplits);
    }
    ifaces_[i]->truncateTable(tableName, preserveSplits);
  }

  void enableTable(const TTableName& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enableTable(tableName);
    }
    ifaces_[i]->enableTable(tableName);
  }

  void disableTable(const TTableName& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disableTable(tableName);
    }
    ifaces_[i]->disableTable(tableName);
  }

  bool isTableEnabled(const TTableName& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isTableEnabled(tableName);
    }
    return ifaces_[i]->isTableEnabled(tableName);
  }

  bool isTableDisabled(const TTableName& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isTableDisabled(tableName);
    }
    return ifaces_[i]->isTableDisabled(tableName);
  }

  bool isTableAvailable(const TTableName& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isTableAvailable(tableName);
    }
    return ifaces_[i]->isTableAvailable(tableName);
  }

  bool isTableAvailableWithSplit(const TTableName& tableName, const std::vector<std::string> & splitKeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isTableAvailableWithSplit(tableName, splitKeys);
    }
    return ifaces_[i]->isTableAvailableWithSplit(tableName, splitKeys);
  }

  void addColumnFamily(const TTableName& tableName, const TColumnFamilyDescriptor& column) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addColumnFamily(tableName, column);
    }
    ifaces_[i]->addColumnFamily(tableName, column);
  }

  void deleteColumnFamily(const TTableName& tableName, const std::string& column) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteColumnFamily(tableName, column);
    }
    ifaces_[i]->deleteColumnFamily(tableName, column);
  }

  void modifyColumnFamily(const TTableName& tableName, const TColumnFamilyDescriptor& column) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modifyColumnFamily(tableName, column);
    }
    ifaces_[i]->modifyColumnFamily(tableName, column);
  }

  void modifyTable(const TTableDescriptor& desc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modifyTable(desc);
    }
    ifaces_[i]->modifyTable(desc);
  }

  void createNamespace(const TNamespaceDescriptor& namespaceDesc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createNamespace(namespaceDesc);
    }
    ifaces_[i]->createNamespace(namespaceDesc);
  }

  void modifyNamespace(const TNamespaceDescriptor& namespaceDesc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modifyNamespace(namespaceDesc);
    }
    ifaces_[i]->modifyNamespace(namespaceDesc);
  }

  void deleteNamespace(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteNamespace(name);
    }
    ifaces_[i]->deleteNamespace(name);
  }

  void getNamespaceDescriptor(TNamespaceDescriptor& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNamespaceDescriptor(_return, name);
    }
    ifaces_[i]->getNamespaceDescriptor(_return, name);
    return;
  }

  void listNamespaceDescriptors(std::vector<TNamespaceDescriptor> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listNamespaceDescriptors(_return);
    }
    ifaces_[i]->listNamespaceDescriptors(_return);
    return;
  }

  void listNamespaces(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listNamespaces(_return);
    }
    ifaces_[i]->listNamespaces(_return);
    return;
  }

  TThriftServerType::type getThriftServerType() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getThriftServerType();
    }
    return ifaces_[i]->getThriftServerType();
  }

  void getSlowLogResponses(std::vector<TOnlineLogRecord> & _return, const std::set<TServerName> & serverNames, const TLogQueryFilter& logQueryFilter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSlowLogResponses(_return, serverNames, logQueryFilter);
    }
    ifaces_[i]->getSlowLogResponses(_return, serverNames, logQueryFilter);
    return;
  }

  void clearSlowLogResponses(std::vector<bool> & _return, const std::set<TServerName> & serverNames) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clearSlowLogResponses(_return, serverNames);
    }
    ifaces_[i]->clearSlowLogResponses(_return, serverNames);
    return;
  }

  void getClusterId(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getClusterId(_return);
    }
    ifaces_[i]->getClusterId(_return);
    return;
  }

};

}}}} // namespace

#endif
